{"ast":null,"code":"export default {\n  data() {\n    return {\n      canvas: null,\n      ctx: null,\n      width: 0,\n      height: 0,\n      basket: {\n        x: 0,\n        width: 100,\n        height: 20\n      },\n      jewels: [],\n      score: 0,\n      isMovingLeft: false,\n      isMovingRight: false,\n      gameStarted: false,\n      remainingTime: 30,\n      timer: null\n    };\n  },\n\n  mounted() {\n    this.canvas = this.$refs.canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\n\n    this.startGame();\n    this.attachEventListeners();\n  },\n\n  beforeUnmounted() {\n    this.removeEventListeners();\n    this.stopTimer();\n  },\n\n  methods: {\n    startGame() {\n      this.gameStarted = true;\n      this.score = 0;\n      this.jewels = [];\n      this.remainingTime = 30;\n      this.startTimer();\n      this.createJewels();\n      this.draw();\n    },\n\n    createJewels() {\n      setInterval(() => {\n        const jewel = {\n          x: Math.random() * (this.width - 20),\n          y: 0,\n          size: 20,\n          speed: Math.random() * 2 + 1,\n          score: Math.random() < 0.5 ? -1 : 1\n        };\n        this.jewels.push(jewel);\n      }, 1000);\n    },\n\n    draw() {\n      if (this.remainingTime === 0) {\n        return;\n      }\n\n      this.ctx.clearRect(0, 0, this.width, this.height); // Draw basket\n\n      this.ctx.fillStyle = 'blue';\n      this.ctx.fillRect(this.basket.x, this.height - this.basket.height, this.basket.width, this.basket.height); // Draw jewels\n\n      for (const jewel of this.jewels) {\n        const jewelColor = jewel.score < 0 ? 'gray' : 'red';\n        this.ctx.fillStyle = jewelColor;\n        this.ctx.fillRect(jewel.x, jewel.y, jewel.size, jewel.size);\n        jewel.y += jewel.speed; // Check collision with basket\n\n        if (jewel.y + jewel.size >= this.height - this.basket.height && jewel.x + jewel.size >= this.basket.x && jewel.x <= this.basket.x + this.basket.width) {\n          this.score += jewel.score;\n          this.jewels.splice(this.jewels.indexOf(jewel), 1);\n        } // Remove jewels that fall off the canvas\n\n\n        if (jewel.y > this.height) {\n          this.jewels.splice(this.jewels.indexOf(jewel), 1);\n        }\n      }\n\n      requestAnimationFrame(this.draw);\n    },\n\n    moveBasket() {\n      const speed = 5;\n\n      if (this.isMovingLeft) {\n        this.basket.x = Math.max(0, this.basket.x - speed);\n      }\n\n      if (this.isMovingRight) {\n        this.basket.x = Math.min(this.width - this.basket.width, this.basket.x + speed);\n      }\n    },\n\n    handleKeyDown(event) {\n      event.preventDefault();\n\n      if (event.key === 'ArrowLeft') {\n        this.isMovingLeft = true;\n        this.moveBasket();\n      } else if (event.key === 'ArrowRight') {\n        this.isMovingRight = true;\n        this.moveBasket();\n      } else if (event.key === 'ArrowUp') {\n        this.moveBasketUp();\n      }\n    },\n\n    handleKeyUp(event) {\n      if (event.key === 'ArrowLeft') {\n        this.isMovingLeft = false;\n      } else if (event.key === 'ArrowRight') {\n        this.isMovingRight = false;\n      }\n    },\n\n    attachEventListeners() {\n      window.addEventListener('keydown', this.handleKeyDown);\n      window.addEventListener('keyup', this.handleKeyUp);\n    },\n\n    removeEventListeners() {\n      window.removeEventListener('keydown', this.handleKeyDown);\n      window.removeEventListener('keyup', this.handleKeyUp);\n    },\n\n    startTimer() {\n      this.timer = setInterval(() => {\n        if (this.remainingTime > 0) {\n          this.remainingTime--;\n        } else {\n          this.stopGame();\n        }\n      }, 1000);\n    },\n\n    stopTimer() {\n      clearInterval(this.timer);\n    },\n\n    stopGame() {\n      this.gameStarted = false;\n      this.stopTimer();\n      this.isMovingLeft = false;\n      this.isMovingRight = false;\n      this.jewels = this.jewels.map(jewel => ({ ...jewel,\n        score: jewel.score < 0 ? -1 : 0\n      }));\n      this.removeEventListeners();\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["data","canvas","ctx","width","height","basket","x","jewels","score","isMovingLeft","isMovingRight","gameStarted","remainingTime","timer","mounted","$refs","getContext","startGame","attachEventListeners","beforeUnmounted","removeEventListeners","stopTimer","methods","startTimer","createJewels","draw","setInterval","jewel","Math","random","y","size","speed","push","clearRect","fillStyle","fillRect","jewelColor","splice","indexOf","requestAnimationFrame","moveBasket","max","min","handleKeyDown","event","preventDefault","key","moveBasketUp","handleKeyUp","window","addEventListener","removeEventListener","stopGame","clearInterval","map"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\TreasurePage.vue"],"sourcesContent":["<template>\r\n     <div class=\"game\" tabindex=\"0\" @keydown=\"handleKeyDown\" @keyup=\"handleKeyUp\">\r\n          <div class=\"canvas-container\">\r\n               <canvas ref=\"canvas\" width=\"400\" height=\"400\"></canvas>\r\n               <div class=\"basket\" :style=\"{ bottom: '0', left: basket.x + 'px' }\"></div>               \r\n               <div v-if=\"remainingTime === 0\" class=\"overlay\"></div>\r\n          </div>\r\n          <p>Score: {{ score }}</p>\r\n          <p>Time: {{ remainingTime }} 초 남음</p>\r\n     </div>\r\n</template>\r\n   \r\n<script>\r\nexport default {\r\n     data() {\r\n          return {\r\n               canvas: null,\r\n               ctx: null,\r\n               width: 0,\r\n               height: 0,\r\n               basket: {\r\n                    x: 0,\r\n                    width: 100,\r\n                    height: 20,\r\n               },\r\n               jewels: [],\r\n               score: 0,\r\n               isMovingLeft: false,\r\n               isMovingRight: false,\r\n               gameStarted: false,\r\n               remainingTime: 30,\r\n               timer: null,\r\n          };\r\n     },\r\n     mounted() {\r\n          this.canvas = this.$refs.canvas;\r\n          this.ctx = this.canvas.getContext('2d');\r\n          this.width = this.canvas.width;\r\n          this.height = this.canvas.height;\r\n          this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\r\n          this.startGame();\r\n          this.attachEventListeners();\r\n     },\r\n     beforeUnmounted() {\r\n          this.removeEventListeners();\r\n          this.stopTimer();\r\n     },\r\n     methods: {\r\n          startGame() {\r\n               this.gameStarted = true;\r\n               this.score = 0;\r\n               this.jewels = [];\r\n               this.remainingTime = 30;\r\n               this.startTimer();\r\n               this.createJewels();\r\n               this.draw();\r\n          },\r\n          createJewels() {\r\n               setInterval(() => {\r\n                    const jewel = {\r\n                         x: Math.random() * (this.width - 20),\r\n                         y: 0,\r\n                         size: 20,\r\n                         speed: Math.random() * 2 + 1,\r\n                         score: Math.random() < 0.5 ? -1 : 1,\r\n                    };\r\n                    this.jewels.push(jewel);\r\n               }, 1000);\r\n          },\r\n          draw() {\r\n               if (this.remainingTime === 0) {\r\n                    return;\r\n               }\r\n\r\n               this.ctx.clearRect(0, 0, this.width, this.height);\r\n\r\n               // Draw basket\r\n               this.ctx.fillStyle = 'blue';\r\n               this.ctx.fillRect(this.basket.x, this.height - this.basket.height, this.basket.width, this.basket.height);\r\n\r\n               // Draw jewels\r\n               for (const jewel of this.jewels) {\r\n                    const jewelColor = jewel.score < 0 ? 'gray' : 'red';\r\n                    this.ctx.fillStyle = jewelColor;\r\n                    this.ctx.fillRect(jewel.x, jewel.y, jewel.size, jewel.size);\r\n                    jewel.y += jewel.speed;\r\n\r\n                    // Check collision with basket\r\n                    if (\r\n                         jewel.y + jewel.size >= this.height - this.basket.height &&\r\n                         jewel.x + jewel.size >= this.basket.x &&\r\n                         jewel.x <= this.basket.x + this.basket.width\r\n                    ) {\r\n                         this.score += jewel.score;\r\n                         this.jewels.splice(this.jewels.indexOf(jewel), 1);\r\n                    }\r\n\r\n                    // Remove jewels that fall off the canvas\r\n                    if (jewel.y > this.height) {\r\n                         this.jewels.splice(this.jewels.indexOf(jewel), 1);\r\n                    }\r\n               }\r\n\r\n               requestAnimationFrame(this.draw);\r\n          },\r\n          moveBasket() {\r\n               const speed = 5;\r\n               if (this.isMovingLeft) {\r\n                    this.basket.x = Math.max(0, this.basket.x - speed);\r\n               }\r\n               if (this.isMovingRight) {\r\n                    this.basket.x = Math.min(this.width - this.basket.width, this.basket.x + speed);\r\n               }\r\n          },\r\n          handleKeyDown(event) {\r\n               event.preventDefault();\r\n               if (event.key === 'ArrowLeft') {\r\n                    this.isMovingLeft = true;\r\n                    this.moveBasket();\r\n               } else if (event.key === 'ArrowRight') {\r\n                    this.isMovingRight = true;\r\n                    this.moveBasket();\r\n               } else if (event.key === 'ArrowUp') {\r\n                    this.moveBasketUp();\r\n               }\r\n          },\r\n          handleKeyUp(event) {\r\n               if (event.key === 'ArrowLeft') {\r\n                    this.isMovingLeft = false;\r\n               } else if (event.key === 'ArrowRight') {\r\n                    this.isMovingRight = false;\r\n               }\r\n          },\r\n          attachEventListeners() {\r\n               window.addEventListener('keydown', this.handleKeyDown);\r\n               window.addEventListener('keyup', this.handleKeyUp);\r\n          },\r\n          removeEventListeners() {\r\n               window.removeEventListener('keydown', this.handleKeyDown);\r\n               window.removeEventListener('keyup', this.handleKeyUp);\r\n          },\r\n          startTimer() {\r\n               this.timer = setInterval(() => {\r\n                    if (this.remainingTime > 0) {\r\n                         this.remainingTime--;\r\n                    } else {\r\n                         this.stopGame();\r\n                    }\r\n               }, 1000);\r\n          },\r\n          stopTimer() {\r\n               clearInterval(this.timer);\r\n          },\r\n          stopGame() {\r\n               this.gameStarted = false;\r\n               this.stopTimer();\r\n               this.isMovingLeft = false;\r\n               this.isMovingRight = false;\r\n               this.jewels = this.jewels.map(jewel => ({ ...jewel, score: jewel.score < 0 ? -1 : 0 }));\r\n\r\n               this.removeEventListeners();\r\n          },\r\n     },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.canvas-container {\r\n     position: relative;\r\n     width: 400px;\r\n     height: 400px;\r\n     border: 1px solid #000;\r\n}\r\n\r\n.overlay {\r\n   position: absolute;\r\n   top: 0;\r\n   left: 0;\r\n   width: 100%;\r\n   height: 100%;\r\n   background-color: rgba(0, 0, 0, 0.5);\r\n   z-index: 20;\r\n}\r\n\r\ncanvas {\r\n     border: 1px solid #000;\r\n}\r\n\r\n.game {\r\n     display: flex;\r\n     flex-direction: column;\r\n     align-items: center;\r\n}\r\n\r\n.basket {\r\n     position: absolute;\r\n     width: 100px;\r\n     height: 20px;\r\n     background-color: blue;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}