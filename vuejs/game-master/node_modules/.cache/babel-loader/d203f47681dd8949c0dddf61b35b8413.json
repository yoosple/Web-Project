{"ast":null,"code":"import { version, isProxy, toRaw, defineComponent, ref, shallowRef, onMounted, onBeforeUnmount, watch, h } from 'vue';\nimport { Chart as Chart$1, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\nconst CommonProps = {\n  data: {\n    type: Object,\n    required: true\n  },\n  options: {\n    type: Object,\n    default: () => ({})\n  },\n  plugins: {\n    type: Array,\n    default: () => []\n  },\n  datasetIdKey: {\n    type: String,\n    default: \"label\"\n  },\n  updateMode: {\n    type: String,\n    default: undefined\n  }\n};\nconst Props = {\n  type: {\n    type: String,\n    required: true\n  },\n  ...CommonProps\n};\nconst compatProps = version[0] === \"2\" ? (internals, props) => Object.assign(internals, {\n  attrs: props\n}) : (internals, props) => Object.assign(internals, props);\n\nfunction toRawIfProxy(obj) {\n  return isProxy(obj) ? toRaw(obj) : obj;\n}\n\nfunction cloneProxy(obj) {\n  let src = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : obj;\n  return isProxy(src) ? new Proxy(obj, {}) : obj;\n}\n\nfunction setOptions(chart, nextOptions) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\n\nfunction setDatasets(currentData, nextDatasets, datasetIdKey) {\n  const addedDatasets = [];\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return { ...nextDataset\n      };\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction cloneData(data, datasetIdKey) {\n  const nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event, \"dataset\", {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event, \"nearest\", {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event, \"index\", {\n    intersect: true\n  }, false);\n}\n\nconst Chart = defineComponent({\n  props: Props,\n\n  setup(props, param) {\n    let {\n      expose\n    } = param;\n    const canvasRef = ref(null);\n    const chartRef = shallowRef(null);\n    expose({\n      chart: chartRef\n    });\n\n    const renderChart = () => {\n      if (!canvasRef.value) return;\n      const {\n        type,\n        data,\n        options,\n        plugins,\n        datasetIdKey\n      } = props;\n      const clonedData = cloneData(data, datasetIdKey);\n      const proxiedData = cloneProxy(clonedData, data);\n      chartRef.value = new Chart$1(canvasRef.value, {\n        type,\n        data: proxiedData,\n        options: { ...options\n        },\n        plugins\n      });\n    };\n\n    const destroyChart = () => {\n      const chart = toRaw(chartRef.value);\n\n      if (chart) {\n        chart.destroy();\n        chartRef.value = null;\n      }\n    };\n\n    const update = chart => {\n      chart.update(props.updateMode);\n    };\n\n    onMounted(renderChart);\n    onBeforeUnmount(destroyChart);\n    watch([() => props.options, () => props.data], (param, param1) => {\n      let [nextOptionsProxy, nextDataProxy] = param,\n          [prevOptionsProxy, prevDataProxy] = param1;\n      const chart = toRaw(chartRef.value);\n\n      if (!chart) {\n        return;\n      }\n\n      let shouldUpdate = false;\n\n      if (nextOptionsProxy) {\n        const nextOptions = toRawIfProxy(nextOptionsProxy);\n        const prevOptions = toRawIfProxy(prevOptionsProxy);\n\n        if (nextOptions && nextOptions !== prevOptions) {\n          setOptions(chart, nextOptions);\n          shouldUpdate = true;\n        }\n      }\n\n      if (nextDataProxy) {\n        const nextLabels = toRawIfProxy(nextDataProxy.labels);\n        const prevLabels = toRawIfProxy(prevDataProxy.labels);\n        const nextDatasets = toRawIfProxy(nextDataProxy.datasets);\n        const prevDatasets = toRawIfProxy(prevDataProxy.datasets);\n\n        if (nextLabels !== prevLabels) {\n          setLabels(chart.config.data, nextLabels);\n          shouldUpdate = true;\n        }\n\n        if (nextDatasets && nextDatasets !== prevDatasets) {\n          setDatasets(chart.config.data, nextDatasets, props.datasetIdKey);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        update(chart);\n      }\n    }, {\n      deep: true\n    });\n    return () => {\n      return h(\"canvas\", {\n        ref: canvasRef\n      });\n    };\n  }\n\n});\n\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return defineComponent({\n    props: CommonProps,\n\n    setup(props, param) {\n      let {\n        expose\n      } = param;\n      const ref = shallowRef(null);\n\n      const reforwardRef = chartRef => {\n        ref.value = chartRef?.chart;\n      };\n\n      expose({\n        chart: ref\n      });\n      return () => {\n        return h(Chart, compatProps({\n          ref: reforwardRef\n        }, {\n          type,\n          ...props\n        }));\n      };\n    }\n\n  });\n}\n\nconst Bar = /* #__PURE__ */createTypedChart(\"bar\", BarController);\nconst Doughnut = /* #__PURE__ */createTypedChart(\"doughnut\", DoughnutController);\nconst Line = /* #__PURE__ */createTypedChart(\"line\", LineController);\nconst Pie = /* #__PURE__ */createTypedChart(\"pie\", PieController);\nconst PolarArea = /* #__PURE__ */createTypedChart(\"polarArea\", PolarAreaController);\nconst Radar = /* #__PURE__ */createTypedChart(\"radar\", RadarController);\nconst Bubble = /* #__PURE__ */createTypedChart(\"bubble\", BubbleController);\nconst Scatter = /* #__PURE__ */createTypedChart(\"scatter\", ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, createTypedChart, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"mappings":"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","names":["CommonProps","data","type","Object","required","options","default","plugins","Array","datasetIdKey","String","updateMode","undefined","Props","compatProps","version","internals","props","assign","attrs","toRawIfProxy","obj","isProxy","toRaw","cloneProxy","src","Proxy","setOptions","chart","nextOptions","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","includes","push","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","intersect","getElementAtEvent","getElementsAtEvent","Chart","defineComponent","setup","param","expose","canvasRef","ref","chartRef","shallowRef","renderChart","value","clonedData","proxiedData","ChartJS","destroyChart","destroy","update","onMounted","onBeforeUnmount","watch","param1","nextOptionsProxy","nextDataProxy","prevOptionsProxy","prevDataProxy","shouldUpdate","prevOptions","prevLabels","prevDatasets","config","deep","h","createTypedChart","registerables","register","reforwardRef","Bar","BarController","Doughnut","DoughnutController","Line","LineController","Pie","PieController","PolarArea","PolarAreaController","Radar","RadarController","Bubble","BubbleController","Scatter","ScatterController"],"sources":["../src/props.ts","../src/utils.ts","../src/chart.ts","../src/typedCharts.ts"],"sourcesContent":["import type { PropType } from 'vue'\nimport type {\n  ChartType,\n  ChartData,\n  ChartOptions,\n  Plugin,\n  UpdateMode\n} from 'chart.js'\n\nexport const CommonProps = {\n  data: {\n    type: Object as PropType<ChartData>,\n    required: true\n  },\n  options: {\n    type: Object as PropType<ChartOptions>,\n    default: () => ({})\n  },\n  plugins: {\n    type: Array as PropType<Plugin[]>,\n    default: () => []\n  },\n  datasetIdKey: {\n    type: String,\n    default: 'label'\n  },\n  updateMode: {\n    type: String as PropType<UpdateMode>,\n    default: undefined\n  }\n} as const\n\nexport const Props = {\n  type: {\n    type: String as PropType<ChartType>,\n    required: true\n  },\n  ...CommonProps\n} as const\n","import { isProxy, toRaw, version } from 'vue'\nimport type {\n  Chart,\n  ChartType,\n  ChartData,\n  ChartDataset,\n  ChartOptions,\n  DefaultDataPoint\n} from 'chart.js'\n\nexport const compatProps =\n  version[0] === '2'\n    ? <I extends {}, T extends {}>(internals: I, props: T) =>\n        Object.assign(internals, { attrs: props }) as unknown as I & T\n    : <I extends {}, T extends {}>(internals: I, props: T) =>\n        Object.assign(internals, props)\n\nexport function toRawIfProxy<T>(obj: T) {\n  return isProxy(obj) ? toRaw(obj) : obj\n}\n\nexport function cloneProxy<T extends object>(obj: T, src = obj) {\n  return isProxy(src) ? new Proxy(obj, {}) : obj\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions)\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey: string\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  )\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey: string) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: []\n  }\n\n  setLabels(nextData, data.labels)\n  setDatasets(nextData, data.datasets, datasetIdKey)\n\n  return nextData\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(chart: Chart, event: MouseEvent) {\n  return chart.getElementsAtEventForMode(\n    event,\n    'dataset',\n    { intersect: true },\n    false\n  )\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(chart: Chart, event: MouseEvent) {\n  return chart.getElementsAtEventForMode(\n    event,\n    'nearest',\n    { intersect: true },\n    false\n  )\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(chart: Chart, event: MouseEvent) {\n  return chart.getElementsAtEventForMode(\n    event,\n    'index',\n    { intersect: true },\n    false\n  )\n}\n","import {\n  defineComponent,\n  ref,\n  shallowRef,\n  h,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  toRaw\n} from 'vue'\nimport { Chart as ChartJS } from 'chart.js'\nimport type { ChartComponent } from './types.js'\nimport { Props } from './props.js'\nimport {\n  cloneData,\n  setLabels,\n  setDatasets,\n  setOptions,\n  toRawIfProxy,\n  cloneProxy\n} from './utils.js'\n\nexport const Chart = defineComponent({\n  props: Props,\n  setup(props, { expose }) {\n    const canvasRef = ref<HTMLCanvasElement | null>(null)\n    const chartRef = shallowRef<ChartJS | null>(null)\n\n    expose({ chart: chartRef })\n\n    const renderChart = () => {\n      if (!canvasRef.value) return\n\n      const { type, data, options, plugins, datasetIdKey } = props\n      const clonedData = cloneData(data, datasetIdKey)\n      const proxiedData = cloneProxy(clonedData, data)\n\n      chartRef.value = new ChartJS(canvasRef.value, {\n        type,\n        data: proxiedData,\n        options: { ...options },\n        plugins\n      })\n    }\n\n    const destroyChart = () => {\n      const chart = toRaw(chartRef.value)\n\n      if (chart) {\n        chart.destroy()\n        chartRef.value = null\n      }\n    }\n\n    const update = (chart: ChartJS) => {\n      chart.update(props.updateMode)\n    }\n\n    onMounted(renderChart)\n\n    onBeforeUnmount(destroyChart)\n\n    watch(\n      [() => props.options, () => props.data],\n      (\n        [nextOptionsProxy, nextDataProxy],\n        [prevOptionsProxy, prevDataProxy]\n      ) => {\n        const chart = toRaw(chartRef.value)\n\n        if (!chart) {\n          return\n        }\n\n        let shouldUpdate = false\n\n        if (nextOptionsProxy) {\n          const nextOptions = toRawIfProxy(nextOptionsProxy)\n          const prevOptions = toRawIfProxy(prevOptionsProxy)\n\n          if (nextOptions && nextOptions !== prevOptions) {\n            setOptions(chart, nextOptions)\n            shouldUpdate = true\n          }\n        }\n\n        if (nextDataProxy) {\n          const nextLabels = toRawIfProxy(nextDataProxy.labels)\n          const prevLabels = toRawIfProxy(prevDataProxy.labels)\n          const nextDatasets = toRawIfProxy(nextDataProxy.datasets)\n          const prevDatasets = toRawIfProxy(prevDataProxy.datasets)\n\n          if (nextLabels !== prevLabels) {\n            setLabels(chart.config.data, nextLabels)\n            shouldUpdate = true\n          }\n\n          if (nextDatasets && nextDatasets !== prevDatasets) {\n            setDatasets(chart.config.data, nextDatasets, props.datasetIdKey)\n            shouldUpdate = true\n          }\n        }\n\n        if (shouldUpdate) {\n          update(chart)\n        }\n      },\n      { deep: true }\n    )\n\n    return () => {\n      return h('canvas', {\n        ref: canvasRef\n      })\n    }\n  }\n}) as ChartComponent\n","import { defineComponent, shallowRef, h } from 'vue'\nimport type { ChartType, ChartComponentLike, DefaultDataPoint } from 'chart.js'\nimport {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\nimport type { TypedChartComponent, ChartComponentRef } from './types.js'\nimport { CommonProps } from './props.js'\nimport { Chart } from './chart.js'\nimport { compatProps } from './utils.js'\n\nexport function createTypedChart<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  type: TType,\n  registerables: ChartComponentLike\n): TypedChartComponent<TType, TData, TLabel> {\n  ChartJS.register(registerables)\n\n  return defineComponent({\n    props: CommonProps,\n    setup(props, { expose }) {\n      const ref = shallowRef<ChartJS | null>(null)\n      const reforwardRef = (chartRef: ChartComponentRef) => {\n        ref.value = chartRef?.chart\n      }\n\n      expose({ chart: ref })\n\n      return () => {\n        return h(\n          Chart,\n          compatProps(\n            {\n              ref: reforwardRef as any\n            },\n            {\n              type,\n              ...props\n            }\n          )\n        )\n      }\n    }\n  }) as any\n}\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController)\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n)\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController)\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController)\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n)\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController)\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n)\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n)\n"]},"metadata":{},"sourceType":"module"}