{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-6220f3f2\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"rhythm-game\"\n};\nconst _hoisted_2 = {\n  class: \"score\"\n};\nconst _hoisted_3 = {\n  class: \"note-lanes\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, \"점수: \" + _toDisplayString($data.score), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.directionKeys, (key, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"note-lane\",\n      ref_for: true,\n      ref: \"noteLane\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(key.notes, (note, noteIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        class: _normalizeClass([\"note\", {\n          hit: note.hit\n        }]),\n        key: noteIndex,\n        style: _normalizeStyle({\n          top: note.position + 'px'\n        })\n      }, null, 6\n      /* CLASS, STYLE */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])]);\n}","map":{"version":3,"mappings":";;;;;AACQA,OAAK,EAAC;;;AACLA,OAAK,EAAC;;;AACNA,OAAK,EAAC;;;uBAFZC,oBAkBK,KAlBL,cAkBK,CAjBJC,oBAAwC,KAAxC,cAAmB,SAAIC,iBAAGC,WAAH,CAAvB,EAA+B;AAAA;AAA/B,GAiBI,EAhBJF,oBAeM,KAfN,cAeM,oBAdJD,oBAaMI,SAbN,EAaM,IAbN,EAaMC,YAZmBF,mBAYnB,EAZgC,CAA5BG,GAA4B,EAAvBC,KAAuB,KAAlB;yBADpBP,oBAaM,KAbN,EAaM;AAXHM,SAAG,EAAEC,KAWF;AAVJR,WAAK,EAAC,WAUF;mBAAA;AATJS,SAAG,EAAC;AASA,KAbN,sBAMER,oBAMOI,SANP,EAMO,IANP,EAMOC,YAJuBC,GAAG,CAACG,KAI3B,EAJgC,CAA7BC,IAA6B,EAAvBC,SAAuB,KAAd;2BAFzBX,oBAMO,KANP,EAMO;AALLD,aAAK,mBAAC,MAAD,EAAO;AAAAa,eAGGF,IAAI,CAACE;AAHR,SAAP,EAKA;AAHJN,WAAG,EAAEK,SAGD;AADJE,aAAK;AAAAC,eAASJ,IAAI,CAACK,QAAL,GAAa;AAAtB;AACD,OANP;;AAAA;KAMO,CANP;;AAAA,OANF;GAaM,CAbN;;AAAA,GAcI,EAfN,CAgBI,CAlBL","names":["class","_createElementBlock","_createElementVNode","_toDisplayString","$data","_Fragment","_renderList","key","index","ref","notes","note","noteIndex","hit","style","top","position"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\DancePage.vue"],"sourcesContent":["<template>\r\n   <div class=\"rhythm-game\">\r\n    <div class=\"score\">점수: {{ score }}</div>\r\n    <div class=\"note-lanes\">\r\n      <div\r\n        v-for=\"(key, index) in directionKeys\"\r\n        :key=\"index\"\r\n        class=\"note-lane\"\r\n        ref=\"noteLane\"\r\n      >\r\n        <div\r\n          class=\"note\"\r\n          v-for=\"(note, noteIndex) in key.notes\"\r\n          :key=\"noteIndex\"\r\n          :class=\"{ hit: note.hit }\"\r\n          :style=\"{ top: note.position + 'px' }\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n </template>\r\n \r\n<script>\r\nimport { gsap } from 'gsap';\r\nimport { Howl } from 'howler';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      score: 0,\r\n      directionKeys: [\r\n        { key: 'ArrowLeft', notes: [] },\r\n        { key: 'ArrowUp', notes: [] },\r\n        { key: 'ArrowDown', notes: [] },\r\n        { key: 'ArrowRight', notes: [] },\r\n      ],\r\n      hitPosition: 100,\r\n      song: new Howl({\r\n        src: ['path/to/your/song.mp3'],\r\n        onplay: this.onSongPlay,\r\n      }),\r\n    };\r\n  },\r\n  mounted() {\r\n    window.addEventListener('keydown', this.handleKeydown);\r\n    this.song.play();\r\n  },\r\n  beforeUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeydown);\r\n  },\r\n  methods: {\r\n    onSongPlay() {\r\n      // Add your note timings and directions here\r\n      const noteTimings = [\r\n        { timing: 1, direction: 'ArrowLeft' },\r\n        { timing: 2, direction: 'ArrowUp' },\r\n        { timing: 3, direction: 'ArrowDown' },\r\n        { timing: 4, direction: 'ArrowRight' },\r\n      ];\r\n\r\n      noteTimings.forEach((noteTiming) => {\r\n        const delay = noteTiming.timing - this.hitPosition / 1000;\r\n        const key = this.directionKeys.find((key) => key.key === noteTiming.direction);\r\n\r\n        key.notes.push({ position: 0, hit: false });\r\n\r\n        gsap.to(key.notes[key.notes.length - 1], {\r\n          position: this.hitPosition,\r\n          duration: delay,\r\n          onComplete: () => {\r\n            if (!key.notes[0].hit) {\r\n              key.notes.shift();\r\n            }\r\n          },\r\n        });\r\n      });\r\n    },\r\n    handleKeydown(event) {\r\n      const key = this.directionKeys.find((key) => key.key === event.code);\r\n\r\n      if (key) {\r\n        const note = key.notes[0];\r\n\r\n        if (note && note.position >= this.hitPosition - 10 && note.position <= this.hitPosition + 10) {\r\n          note.hit = true;\r\n          this.score += 10;\r\n        }\r\n      }\r\n    },\r\n  },\r\n};\r\n </script>\r\n \r\n <style scoped>\r\n .rhythm-game {\r\n   display: flex;\r\n   flex-direction: column;\r\n   align-items: center;\r\n }\r\n \r\n .note-lane {\r\n   position: relative;\r\n   width: 100px;\r\n   height: 300px;\r\n   border: 1px solid #000;\r\n }\r\n \r\n .note {\r\n   position: absolute;\r\n   width: 50px;\r\n   height: 50px;\r\n   background-color: #f00;\r\n   opacity: 1;\r\n   left: 25px;\r\n }\r\n \r\n .note.hit {\r\n   opacity: 0;\r\n }\r\n </style>"]},"metadata":{},"sourceType":"module"}