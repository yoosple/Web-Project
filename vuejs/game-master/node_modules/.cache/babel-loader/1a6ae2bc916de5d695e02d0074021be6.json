{"ast":null,"code":"export default {\n  data() {\n    return {\n      canvas: null,\n      ctx: null,\n      width: 0,\n      height: 0,\n      basket: {\n        x: 0,\n        y: 0,\n        width: 50,\n        height: 50\n      },\n      treasures: [],\n      score: 0\n    };\n  },\n\n  mounted() {\n    this.canvas = this.$refs.canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.initTreasures();\n    this.draw();\n  },\n\n  methods: {\n    initTreasures() {\n      const numTreasures = 10;\n\n      for (let i = 0; i < numTreasures; i++) {\n        const treasure = {\n          x: Math.random() * (this.width - 50),\n          y: Math.random() * (this.height - 50),\n          width: 30,\n          height: 30,\n          collected: false\n        };\n        this.treasures.push(treasure);\n      }\n    },\n\n    draw() {\n      this.ctx.clearRect(0, 0, this.width, this.height);\n\n      for (const treasure of this.treasures) {\n        if (!treasure.collected) {\n          this.ctx.fillStyle = 'gold';\n          this.ctx.fillRect(treasure.x, treasure.y, treasure.width, treasure.height);\n        }\n      }\n\n      this.ctx.fillStyle = 'blue';\n      this.ctx.fillRect(this.basket.x, this.basket.y, this.basket.width, this.basket.height);\n      requestAnimationFrame(this.draw);\n    },\n\n    moveBasket(event) {\n      const rect = this.canvas.getBoundingClientRect();\n      const offsetX = event.clientX - rect.left;\n      const offsetY = event.clientY - rect.top;\n      this.basket.x = offsetX - this.basket.width / 2;\n      this.basket.y = offsetY - this.basket.height / 2;\n    },\n\n    catchTreasure() {\n      for (const treasure of this.treasures) {\n        if (!treasure.collected && this.isCollision(this.basket, treasure)) {\n          treasure.collected = true;\n          this.score++;\n        }\n      }\n    },\n\n    isCollision(rect1, rect2) {\n      return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["data","canvas","ctx","width","height","basket","x","y","treasures","score","mounted","$refs","getContext","initTreasures","draw","methods","numTreasures","i","treasure","Math","random","collected","push","clearRect","fillStyle","fillRect","requestAnimationFrame","moveBasket","event","rect","getBoundingClientRect","offsetX","clientX","left","offsetY","clientY","top","catchTreasure","isCollision","rect1","rect2"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\TreasurePage.vue"],"sourcesContent":["<template>\r\n     <div class=\"game\">\r\n       <div class=\"canvas-container\">\r\n         <canvas ref=\"canvas\" @mousemove=\"moveBasket\" @mousedown=\"catchTreasure\"></canvas>\r\n       </div>\r\n       <p>Score: {{ score }}</p>\r\n     </div>\r\n   </template>\r\n   \r\n   <script>\r\n   export default {\r\n     data() {\r\n       return {\r\n         canvas: null,\r\n         ctx: null,\r\n         width: 0,\r\n         height: 0,\r\n         basket: {\r\n           x: 0,\r\n           y: 0,\r\n           width: 50,\r\n           height: 50,\r\n         },\r\n         treasures: [],\r\n         score: 0,\r\n       };\r\n     },\r\n     mounted() {\r\n       this.canvas = this.$refs.canvas;\r\n       this.ctx = this.canvas.getContext('2d');\r\n       this.width = this.canvas.width;\r\n       this.height = this.canvas.height;\r\n       this.initTreasures();\r\n       this.draw();\r\n     },\r\n     methods: {\r\n       initTreasures() {\r\n         const numTreasures = 10;\r\n         for (let i = 0; i < numTreasures; i++) {\r\n           const treasure = {\r\n             x: Math.random() * (this.width - 50),\r\n             y: Math.random() * (this.height - 50),\r\n             width: 30,\r\n             height: 30,\r\n             collected: false,\r\n           };\r\n           this.treasures.push(treasure);\r\n         }\r\n       },\r\n       draw() {\r\n         this.ctx.clearRect(0, 0, this.width, this.height);\r\n         for (const treasure of this.treasures) {\r\n           if (!treasure.collected) {\r\n             this.ctx.fillStyle = 'gold';\r\n             this.ctx.fillRect(treasure.x, treasure.y, treasure.width, treasure.height);\r\n           }\r\n         }\r\n         this.ctx.fillStyle = 'blue';\r\n         this.ctx.fillRect(this.basket.x, this.basket.y, this.basket.width, this.basket.height);\r\n         requestAnimationFrame(this.draw);\r\n       },\r\n       moveBasket(event) {\r\n         const rect = this.canvas.getBoundingClientRect();\r\n         const offsetX = event.clientX - rect.left;\r\n         const offsetY = event.clientY - rect.top;\r\n         this.basket.x = offsetX - this.basket.width / 2;\r\n         this.basket.y = offsetY - this.basket.height / 2;\r\n       },\r\n       catchTreasure() {\r\n         for (const treasure of this.treasures) {\r\n           if (!treasure.collected && this.isCollision(this.basket, treasure)) {\r\n             treasure.collected = true;\r\n             this.score++;\r\n           }\r\n         }\r\n       },\r\n       isCollision(rect1, rect2) {\r\n         return (\r\n           rect1.x < rect2.x + rect2.width &&\r\n           rect1.x + rect1.width > rect2.x &&\r\n           rect1.y < rect2.y + rect2.height &&\r\n           rect1.y + rect1.height > rect2.y\r\n         );\r\n       },\r\n     },\r\n   };\r\n   </script>\r\n   \r\n   <style scoped>\r\n   .canvas-container {\r\n     position: relative;\r\n     width: 600px;\r\n     height: 400px;\r\n     border: 1px solid #000;\r\n   }\r\n   \r\n   canvas {\r\n     border: 1px solid #000;\r\n   }\r\n   \r\n   .game {\r\n     display: flex;\r\n     flex-direction: column;\r\n     align-items: center;\r\n   }\r\n   </style>"]},"metadata":{},"sourceType":"module"}