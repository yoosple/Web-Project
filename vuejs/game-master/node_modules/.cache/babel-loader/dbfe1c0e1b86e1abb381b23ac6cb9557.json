{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-fd28126e\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"canvas-container\"\n};\nconst _hoisted_2 = {\n  ref: \"canvas\",\n  width: \"400\",\n  height: \"400\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"game\",\n    tabindex: \"0\",\n    onKeydown: _cache[0] || (_cache[0] = (...args) => $options.handleKeyDown && $options.handleKeyDown(...args)),\n    onKeyup: _cache[1] || (_cache[1] = (...args) => $options.handleKeyUp && $options.handleKeyUp(...args))\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512\n  /* NEED_PATCH */\n  ), _createElementVNode(\"div\", {\n    class: \"basket\",\n    style: _normalizeStyle({\n      bottom: '0',\n      left: $data.basket.x + 'px'\n    })\n  }, null, 4\n  /* STYLE */\n  )]), _createElementVNode(\"p\", null, \"Score: \" + _toDisplayString($data.score), 1\n  /* TEXT */\n  ), _createElementVNode(\"p\", null, \"Time: \" + _toDisplayString($data.remainingTime) + \" sec\", 1\n  /* TEXT */\n  )], 32\n  /* HYDRATE_EVENTS */\n  );\n}","map":{"version":3,"mappings":";;;;;AAEeA,OAAK,EAAC;;;AACEC,KAAG,EAAC;AAASC,OAAK,EAAC;AAAMC,QAAM,EAAC;;;uBAFlDC,oBAOM,KAPN,EAOM;AAPDJ,SAAK,EAAC,MAOL;AAPYK,YAAQ,EAAC,GAOrB;AAP0BC,aAAO,yCAAEC,yDAAF,CAOjC;AAPmDC,WAAK,yCAAED,qDAAF;AAOxD,GAPN,GACKE,oBAGM,KAHN,cAGM,CAFDA,oBAAuD,QAAvD,cAAuD,IAAvD,EAAuD;AAAA;AAAvD,GAEC,EADDA,oBAA0E,KAA1E,EAA0E;AAArET,SAAK,EAAC,QAA+D;AAArDU,SAAK;AAAAC;AAAAC,YAAuBC,aAAOC,CAAP,GAAQ;AAA/B;AAAgD,GAA1E;;AAAA,GACC,CAHN,GAIAL,oBAAyB,GAAzB,EAAyB,IAAzB,EAAG,YAAOM,iBAAGF,WAAH,CAAV,EAAkB;AAAA;AAAlB,KACAJ,oBAAoC,GAApC,EAAoC,IAApC,EAAG,WAAMM,iBAAGF,mBAAH,CAAN,GAAyB,MAA5B,EAAgC;AAAA;AAAhC,IANL;;AAAA","names":["class","ref","width","height","_createElementBlock","tabindex","onKeydown","$options","onKeyup","_createElementVNode","style","bottom","left","$data","x","_toDisplayString"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\TreasurePage.vue"],"sourcesContent":["<template>\r\n     <div class=\"game\" tabindex=\"0\" @keydown=\"handleKeyDown\" @keyup=\"handleKeyUp\">\r\n          <div class=\"canvas-container\">\r\n               <canvas ref=\"canvas\" width=\"400\" height=\"400\"></canvas>\r\n               <div class=\"basket\" :style=\"{ bottom: '0', left: basket.x + 'px' }\"></div>\r\n          </div>\r\n          <p>Score: {{ score }}</p>\r\n          <p>Time: {{ remainingTime }} sec</p>\r\n     </div>\r\n</template>\r\n   \r\n<script>\r\nexport default {\r\n     data() {\r\n          return {\r\n               canvas: null,\r\n               ctx: null,\r\n               width: 0,\r\n               height: 0,\r\n               basket: {\r\n                    x: 0,\r\n                    width: 100,\r\n                    height: 20,\r\n               },\r\n               jewels: [],\r\n               score: 0,\r\n               isMovingLeft: false,\r\n               isMovingRight: false,\r\n               gameStarted: false,\r\n               remainingTime: 30,\r\n               timer: null,\r\n          };\r\n     },\r\n     mounted() {\r\n          this.canvas = this.$refs.canvas;\r\n          this.ctx = this.canvas.getContext('2d');\r\n          this.width = this.canvas.width;\r\n          this.height = this.canvas.height;\r\n          this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\r\n          this.startGame();\r\n          this.attachEventListeners();\r\n     },\r\n     beforeUnmounted() {\r\n          this.removeEventListeners();\r\n          this.stopTimer();\r\n     },\r\n     methods: {\r\n          startGame() {\r\n               this.gameStarted = true;\r\n               this.score = 0;\r\n               this.jewels = [];\r\n               this.remainingTime = 30;\r\n               this.startTimer();\r\n               this.createJewels();\r\n               this.draw();\r\n          },\r\n          createJewels() {\r\n               setInterval(() => {\r\n                    const jewel = {\r\n                         x: Math.random() * (this.width - 20),\r\n                         y: 0,\r\n                         size: 20,\r\n                         speed: Math.random() * 2 + 1,\r\n                         score: Math.random() < 0.5 ? -1 : 1,\r\n                    };\r\n                    this.jewels.push(jewel);\r\n               }, 1000);\r\n          },\r\n          draw() {\r\n               this.ctx.clearRect(0, 0, this.width, this.height);\r\n\r\n               // Draw basket\r\n               this.ctx.fillStyle = 'blue';\r\n               this.ctx.fillRect(this.basket.x, this.height - this.basket.height, this.basket.width, this.basket.height);\r\n\r\n               // Draw jewels\r\n               for (const jewel of this.jewels) {\r\n                    const jewelColor = jewel.score < 0 ? 'gray' : 'red';\r\n                    this.ctx.fillStyle = jewelColor;\r\n                    this.ctx.fillRect(jewel.x, jewel.y, jewel.size, jewel.size);\r\n                    jewel.y += jewel.speed;\r\n\r\n                    // Check collision with basket\r\n                    if (\r\n                         jewel.y + jewel.size >= this.height - this.basket.height &&\r\n                         jewel.x + jewel.size >= this.basket.x &&\r\n                         jewel.x <= this.basket.x + this.basket.width\r\n                    ) {\r\n                         this.score += jewel.score;\r\n                         this.jewels.splice(this.jewels.indexOf(jewel), 1);\r\n                    }\r\n\r\n                    // Remove jewels that fall off the canvas\r\n                    if (jewel.y > this.height) {\r\n                         this.jewels.splice(this.jewels.indexOf(jewel), 1);\r\n                    }\r\n               }\r\n\r\n               requestAnimationFrame(this.draw);\r\n          },\r\n          moveBasket() {\r\n               const speed = 5;\r\n               if (this.isMovingLeft) {\r\n                    this.basket.x = Math.max(0, this.basket.x - speed);\r\n               }\r\n               if (this.isMovingRight) {\r\n                    this.basket.x = Math.min(this.width - this.basket.width, this.basket.x + speed);\r\n               }\r\n          },\r\n          handleKeyDown(event) {\r\n               event.preventDefault();\r\n               if (event.key === 'ArrowLeft') {\r\n                    this.isMovingLeft = true;\r\n                    this.moveBasket();\r\n               } else if (event.key === 'ArrowRight') {\r\n                    this.isMovingRight = true;\r\n                    this.moveBasket();\r\n               } else if (event.key === 'ArrowUp') {\r\n                    this.moveBasketUp();\r\n               }\r\n          },\r\n          handleKeyUp(event) {\r\n               if (event.key === 'ArrowLeft') {\r\n                    this.isMovingLeft = false;\r\n               } else if (event.key === 'ArrowRight') {\r\n                    this.isMovingRight = false;\r\n               }\r\n          },\r\n          attachEventListeners() {\r\n               window.addEventListener('keydown', this.handleKeyDown);\r\n               window.addEventListener('keyup', this.handleKeyUp);\r\n          },\r\n          removeEventListeners() {\r\n               window.removeEventListener('keydown', this.handleKeyDown);\r\n               window.removeEventListener('keyup', this.handleKeyUp);\r\n          },\r\n          startTimer() {\r\n               this.timer = setInterval(() => {\r\n                    if (this.remainingTime > 0) {\r\n                         this.remainingTime--;\r\n                    } else {\r\n                         this.stopTimer();\r\n                         this.gameStarted = false;\r\n                         // Additional logic for game over or ending the game\r\n                    }\r\n               }, 1000);\r\n          },\r\n          stopTimer() {\r\n               clearInterval(this.timer);\r\n          },\r\n     },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.canvas-container {\r\n     position: relative;\r\n     width: 400px;\r\n     height: 400px;\r\n     border: 1px solid #000;\r\n}\r\n\r\ncanvas {\r\n     border: 1px solid #000;\r\n}\r\n\r\n.game {\r\n     display: flex;\r\n     flex-direction: column;\r\n     align-items: center;\r\n}\r\n\r\n.basket {\r\n     position: absolute;\r\n     width: 100px;\r\n     height: 20px;\r\n     background-color: blue;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}