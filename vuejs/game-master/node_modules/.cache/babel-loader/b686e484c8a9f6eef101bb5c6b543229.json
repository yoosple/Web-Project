{"ast":null,"code":"export default {\n  data() {\n    return {\n      canvas: null,\n      ctx: null,\n      width: 0,\n      height: 0,\n      basket: {\n        x: 0,\n        width: 100,\n        height: 20\n      },\n      objects: [],\n      score: 0,\n      isMovingLeft: false,\n      isMovingRight: false\n    };\n  },\n\n  mounted() {\n    this.canvas = this.$refs.canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\n\n    this.draw();\n  },\n\n  methods: {\n    draw() {\n      this.ctx.clearRect(0, 0, this.width, this.height);\n      this.ctx.fillStyle = 'blue';\n      this.ctx.fillRect(this.basket.x, this.height - this.basket.height, this.basket.width, this.basket.height);\n\n      for (const object of this.objects) {\n        this.ctx.fillStyle = 'red';\n        this.ctx.fillRect(object.x, object.y, object.width, object.height);\n        object.y += object.speed;\n\n        if (this.isCollision(this.basket, object)) {\n          this.objects.splice(this.objects.indexOf(object), 1);\n          this.score++;\n        } else if (object.y > this.height) {\n          this.objects.splice(this.objects.indexOf(object), 1);\n        }\n      }\n\n      requestAnimationFrame(this.draw);\n    },\n\n    createObject() {\n      const object = {\n        x: Math.random() * (this.width - 20),\n        y: 0,\n        width: 20,\n        height: 20,\n        speed: Math.random() * 3 + 1 // Random speed between 1 and 4\n\n      };\n      this.objects.push(object);\n    },\n\n    moveBasket() {\n      const speed = 5;\n\n      if (this.isMovingLeft) {\n        this.basket.x = Math.max(0, this.basket.x - speed);\n      }\n\n      if (this.isMovingRight) {\n        this.basket.x = Math.min(this.width - this.basket.width, this.basket.x + speed);\n      }\n    },\n\n    handleKeyDown(event) {\n      event.preventDefault(); // Prevent default keyboard behavior\n\n      if (event.key === 'ArrowLeft') {\n        this.isMovingLeft = true;\n      } else if (event.key === 'ArrowRight') {\n        this.isMovingRight = true;\n      } else if (event.key === 'ArrowUp') {\n        this.moveBasketUp();\n      }\n    },\n\n    handleKeyUp(event) {\n      if (event.key === 'ArrowLeft') {\n        this.isMovingLeft = false;\n      } else if (event === 'ArrowRight') {\n        this.isMovingRight = false;\n      }\n    },\n\n    moveBasketUp() {\n      const originalY = this.height - this.basket.height;\n      const offsetY = -50;\n      this.basket.y += offsetY;\n      setTimeout(() => {\n        this.basket.y = originalY;\n      }, 500); // Adjust the duration as needed (in milliseconds)\n    },\n\n    isCollision(rect1, rect2) {\n      return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;\n    }\n\n  },\n\n  created() {\n    setInterval(this.createObject, 1000); // Create new objects every second\n  },\n\n  mounted() {\n    this.canvas = this.$refs.canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\n\n    this.draw();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["data","canvas","ctx","width","height","basket","x","objects","score","isMovingLeft","isMovingRight","mounted","$refs","getContext","draw","methods","clearRect","fillStyle","fillRect","object","y","speed","isCollision","splice","indexOf","requestAnimationFrame","createObject","Math","random","push","moveBasket","max","min","handleKeyDown","event","preventDefault","key","moveBasketUp","handleKeyUp","originalY","offsetY","setTimeout","rect1","rect2","created","setInterval"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\TreasurePage.vue"],"sourcesContent":["<template>\r\n     <div class=\"game\" tabindex=\"0\" @keydown=\"handleKeyDown\" @keyup=\"handleKeyUp\">\r\n       <div class=\"canvas-container\">\r\n         <canvas ref=\"canvas\" width=\"400\" height=\"400\"></canvas>\r\n         <div class=\"basket\" :style=\"{ bottom: '0', left: basket.x + 'px' }\"></div>\r\n       </div>\r\n       <p>Score: {{ score }}</p>\r\n     </div>\r\n   </template>\r\n   \r\n   <script>\r\n   export default {\r\n     data() {\r\n       return {\r\n         canvas: null,\r\n         ctx: null,\r\n         width: 0,\r\n         height: 0,\r\n         basket: {\r\n           x: 0,\r\n           width: 100,\r\n           height: 20,\r\n         },\r\n         objects: [],\r\n         score: 0,\r\n         isMovingLeft: false,\r\n         isMovingRight: false,\r\n       };\r\n     },\r\n     mounted() {\r\n       this.canvas = this.$refs.canvas;\r\n       this.ctx = this.canvas.getContext('2d');\r\n       this.width = this.canvas.width;\r\n       this.height = this.canvas.height;\r\n       this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\r\n       this.draw();\r\n     },\r\n     methods: {\r\n       draw() {\r\n         this.ctx.clearRect(0, 0, this.width, this.height);\r\n         this.ctx.fillStyle = 'blue';\r\n         this.ctx.fillRect(this.basket.x, this.height - this.basket.height, this.basket.width, this.basket.height);\r\n   \r\n         for (const object of this.objects) {\r\n           this.ctx.fillStyle = 'red';\r\n           this.ctx.fillRect(object.x, object.y, object.width, object.height);\r\n   \r\n           object.y += object.speed;\r\n           if (this.isCollision(this.basket, object)) {\r\n             this.objects.splice(this.objects.indexOf(object), 1);\r\n             this.score++;\r\n           } else if (object.y > this.height) {\r\n             this.objects.splice(this.objects.indexOf(object), 1);\r\n           }\r\n         }\r\n   \r\n         requestAnimationFrame(this.draw);\r\n       },\r\n       createObject() {\r\n         const object = {\r\n           x: Math.random() * (this.width - 20),\r\n           y: 0,\r\n           width: 20,\r\n           height: 20,\r\n           speed: Math.random() * 3 + 1, // Random speed between 1 and 4\r\n         };\r\n         this.objects.push(object);\r\n       },\r\n       moveBasket() {\r\n         const speed = 5;\r\n         if (this.isMovingLeft) {\r\n           this.basket.x = Math.max(0, this.basket.x - speed);\r\n         }\r\n         if (this.isMovingRight) {\r\n           this.basket.x = Math.min(this.width - this.basket.width, this.basket.x + speed);\r\n         }\r\n       },\r\n       handleKeyDown(event) {\r\n         event.preventDefault(); // Prevent default keyboard behavior\r\n         if (event.key === 'ArrowLeft') {\r\n           this.isMovingLeft = true;\r\n         } else if (event.key === 'ArrowRight') {\r\n           this.isMovingRight = true;\r\n         } else if (event.key === 'ArrowUp') {\r\n           this.moveBasketUp();\r\n         }\r\n       },\r\n       handleKeyUp(event) {\r\n         if (event.key === 'ArrowLeft') {\r\n           this.isMovingLeft = false;\r\n         } else if (event=== 'ArrowRight') {\r\n        this.isMovingRight = false;\r\n      }\r\n    },\r\n    moveBasketUp() {\r\n      const originalY = this.height - this.basket.height;\r\n      const offsetY = -50;\r\n      this.basket.y += offsetY;\r\n\r\n      setTimeout(() => {\r\n        this.basket.y = originalY;\r\n      }, 500); // Adjust the duration as needed (in milliseconds)\r\n    },\r\n    isCollision(rect1, rect2) {\r\n      return (\r\n        rect1.x < rect2.x + rect2.width &&\r\n        rect1.x + rect1.width > rect2.x &&\r\n        rect1.y < rect2.y + rect2.height &&\r\n        rect1.y + rect1.height > rect2.y\r\n      );\r\n    },\r\n  },\r\n  created() {\r\n    setInterval(this.createObject, 1000); // Create new objects every second\r\n  },\r\n  mounted() {\r\n    this.canvas = this.$refs.canvas;\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.width = this.canvas.width;\r\n    this.height = this.canvas.height;\r\n    this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\r\n    this.draw();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.canvas-container {\r\n  position: relative;\r\n  width: 400px;\r\n  height: 400px;\r\n  border: 1px solid #000;\r\n}\r\n\r\ncanvas {\r\n  border: 1px solid #000;\r\n}\r\n\r\n.game {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.basket {\r\n  position: absolute;\r\n  width: 100px;\r\n  height: 20px;\r\n  background-color: blue;\r\n}\r\n</style>\r\n\r\n   "]},"metadata":{},"sourceType":"module"}