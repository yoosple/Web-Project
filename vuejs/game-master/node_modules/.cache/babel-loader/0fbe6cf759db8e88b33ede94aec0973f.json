{"ast":null,"code":"import { gsap } from 'gsap';\nimport { Howl } from 'howler';\nexport default {\n  data() {\n    return {\n      score: 0,\n      gameStarted: false,\n      showDanceAnimation: false,\n      directionKeys: [{\n        key: 'ArrowLeft',\n        notes: []\n      }, {\n        key: 'ArrowUp',\n        notes: []\n      }, {\n        key: 'ArrowDown',\n        notes: []\n      }, {\n        key: 'ArrowRight',\n        notes: []\n      }],\n      hitPosition: 100,\n      song: new Howl({\n        src: ['path/to/your/song.mp3'],\n        onplay: this.onSongPlay\n      })\n    };\n  },\n\n  mounted() {},\n\n  beforeUnmount() {\n    if (this.gameStarted) {\n      window.removeEventListener('keydown', this.handleKeydown);\n    }\n  },\n\n  methods: {\n    startGame() {\n      this.gameStarted = true;\n      window.addEventListener('keydown', this.handleKeydown);\n      this.song.play();\n    },\n\n    generateRandomNoteTimings() {\n      const noteTimings = [];\n      const numNotes = 20; // 원하는 노트 개수를 설정합니다.\n\n      const minTiming = 1;\n      const maxTiming = 10;\n\n      for (let i = 0; i < numNotes; i++) {\n        noteTimings.push({\n          timing: Math.random() * (maxTiming - minTiming) + minTiming,\n          direction: this.directionKeys[Math.floor(Math.random() * this.directionKeys.length)].key\n        });\n      }\n\n      return noteTimings;\n    },\n\n    onSongPlay() {\n      const noteTimings = this.generateRandomNoteTimings();\n      noteTimings.forEach(noteTiming => {\n        const delay = noteTiming.timing - this.hitPosition / 1000;\n        const key = this.directionKeys.find(key => key.key === noteTiming.direction);\n        key.notes.push({\n          position: 0,\n          hit: false\n        });\n        gsap.to(key.notes[key.notes.length - 1], {\n          position: this.hitPosition,\n          duration: delay,\n          onComplete: () => {\n            if (!key.notes[0].hit) {\n              key.notes.shift();\n            }\n          }\n        });\n      });\n    },\n\n    handleKeydown(event) {\n      const key = this.directionKeys.find(key => key.key === event.code);\n\n      if (key) {\n        const note = key.notes[0];\n\n        if (note && note.position >= this.hitPosition - 10 && note.position <= this.hitPosition + 10) {\n          note.hit = true;\n          this.score += 10;\n          this.showDanceAnimation = true;\n          setTimeout(() => {\n            this.showDanceAnimation = false;\n          }, 500);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["gsap","Howl","data","score","gameStarted","showDanceAnimation","directionKeys","key","notes","hitPosition","song","src","onplay","onSongPlay","mounted","beforeUnmount","window","removeEventListener","handleKeydown","methods","startGame","addEventListener","play","generateRandomNoteTimings","noteTimings","numNotes","minTiming","maxTiming","i","push","timing","Math","random","direction","floor","length","forEach","noteTiming","delay","find","position","hit","to","duration","onComplete","shift","event","code","note","setTimeout"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\DancePage.vue"],"sourcesContent":["<template>\r\n   <div class=\"rhythm-game\">\r\n      <div class=\"score\">Score: {{ score }}</div>\r\n      <button @click=\"startGame\" class=\"start-button\">Start</button>\r\n      <div class=\"game-area\">\r\n         <button class=\"chicken\" disabled>🐔</button>\r\n         <button class=\"dance-animation\" v-if=\"showDanceAnimation\" disabled>💃</button>\r\n         <div class=\"note-lanes\">\r\n            <div v-for=\"(key, index) in directionKeys\" :key=\"index\" class=\"note-lane\" ref=\"noteLane\">\r\n               <div class=\"note\" v-for=\"(note, noteIndex) in key.notes\" :key=\"noteIndex\" :class=\"{ hit: note.hit }\"\r\n                  :style=\"{ top: note.position + 'px' }\"></div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</template>\r\n \r\n<script>\r\nimport { gsap } from 'gsap';\r\nimport { Howl } from 'howler';\r\n\r\nexport default {\r\n   data() {\r\n      return {\r\n         score: 0,\r\n         gameStarted: false,\r\n         showDanceAnimation: false,\r\n         directionKeys: [\r\n            { key: 'ArrowLeft', notes: [] },\r\n            { key: 'ArrowUp', notes: [] },\r\n            { key: 'ArrowDown', notes: [] },\r\n            { key: 'ArrowRight', notes: [] },\r\n         ],\r\n         hitPosition: 100,\r\n         song: new Howl({\r\n            src: ['path/to/your/song.mp3'],\r\n            onplay: this.onSongPlay,\r\n         }),\r\n      };\r\n   },\r\n   mounted() {\r\n   },\r\n   beforeUnmount() {\r\n      if (this.gameStarted) {\r\n         window.removeEventListener('keydown', this.handleKeydown);\r\n      }\r\n   },\r\n   methods: {\r\n      startGame() {\r\n         this.gameStarted = true;\r\n         window.addEventListener('keydown', this.handleKeydown);\r\n         this.song.play();\r\n      },\r\n      generateRandomNoteTimings() {\r\n         const noteTimings = [];\r\n         const numNotes = 20; // 원하는 노트 개수를 설정합니다.\r\n         const minTiming = 1;\r\n         const maxTiming = 10;\r\n\r\n         for (let i = 0; i < numNotes; i++) {\r\n            noteTimings.push({\r\n               timing: Math.random() * (maxTiming - minTiming) + minTiming,\r\n               direction: this.directionKeys[Math.floor(Math.random() * this.directionKeys.length)].key,\r\n            });\r\n         }\r\n\r\n         return noteTimings;\r\n      },\r\n      onSongPlay() {\r\n         const noteTimings = this.generateRandomNoteTimings();\r\n\r\n         noteTimings.forEach((noteTiming) => {\r\n            const delay = noteTiming.timing - this.hitPosition / 1000;\r\n            const key = this.directionKeys.find((key) => key.key === noteTiming.direction);\r\n\r\n            key.notes.push({ position: 0, hit: false });\r\n\r\n            gsap.to(key.notes[key.notes.length - 1], {\r\n               position: this.hitPosition,\r\n               duration: delay,\r\n               onComplete: () => {\r\n                  if (!key.notes[0].hit) {\r\n                     key.notes.shift();\r\n                  }\r\n               },\r\n            });\r\n         });\r\n      },\r\n      handleKeydown(event) {\r\n         const key = this.directionKeys.find((key) => key.key === event.code);\r\n\r\n         if (key) {\r\n            const note = key.notes[0];\r\n\r\n            if (note && note.position >= this.hitPosition - 10 && note.position <= this.hitPosition + 10) {\r\n               note.hit = true;\r\n               this.score += 10;\r\n               this.showDanceAnimation = true;\r\n               setTimeout(() => {\r\n                  this.showDanceAnimation = false;\r\n               }, 500);\r\n            }\r\n         }\r\n      },\r\n   },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.rhythm-game {\r\n   display: flex;\r\n   flex-direction: column;\r\n   align-items: center;\r\n}\r\n\r\n.score {\r\n   margin-bottom: 20px;\r\n}\r\n\r\n.game-area {\r\n   position: relative;\r\n   display: flex;\r\n   justify-content: center;\r\n   align-items: center;\r\n}\r\n\r\n.chicken {\r\n   position: absolute;\r\n   font-size: 2rem;\r\n   border: none;\r\n   background: transparent;\r\n   cursor: default;\r\n}\r\n\r\n.dance-animation {\r\n   position: absolute;\r\n   font-size: 2rem;\r\n   border: none;\r\n   background: transparent;\r\n   cursor: default;\r\n}\r\n\r\n.note-lanes {\r\n   display: flex;\r\n}\r\n\r\n.note-lane {\r\n   position: relative;\r\n   width: 100px;\r\n   height: 300px;\r\n   border: 1px solid #000;\r\n}\r\n\r\n.note {\r\n   position: absolute;\r\n   width: 50px;\r\n   height: 50px;\r\n   background-color: #f00;\r\n   opacity: 1;\r\n   left: 25px;\r\n}\r\n\r\n.note.hit {\r\n   opacity: 0;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}