{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-fd28126e\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"canvas-container\"\n};\nconst _hoisted_2 = {\n  ref: \"canvas\",\n  width: \"400\",\n  height: \"400\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"game\",\n    tabindex: \"0\",\n    onKeydown: _cache[0] || (_cache[0] = (...args) => $options.handleKeyDown && $options.handleKeyDown(...args)),\n    onKeyup: _cache[1] || (_cache[1] = (...args) => $options.handleKeyUp && $options.handleKeyUp(...args))\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512\n  /* NEED_PATCH */\n  ), _createElementVNode(\"div\", {\n    class: \"basket\",\n    style: _normalizeStyle({\n      bottom: '0',\n      left: $data.basket.x + 'px'\n    })\n  }, null, 4\n  /* STYLE */\n  )]), _createElementVNode(\"p\", null, \"Score: \" + _toDisplayString($data.score), 1\n  /* TEXT */\n  )], 32\n  /* HYDRATE_EVENTS */\n  );\n}","map":{"version":3,"mappings":";;;;;AAEYA,OAAK,EAAC;;;AACDC,KAAG,EAAC;AAASC,OAAK,EAAC;AAAMC,QAAM,EAAC;;;uBAF5CC,oBAMM,KANN,EAMM;AANDJ,SAAK,EAAC,MAML;AANYK,YAAQ,EAAC,GAMrB;AAN0BC,aAAO,yCAAEC,yDAAF,CAMjC;AANmDC,WAAK,yCAAED,qDAAF;AAMxD,GANN,GACEE,oBAGM,KAHN,cAGM,CAFJA,oBAAuD,QAAvD,cAAuD,IAAvD,EAAuD;AAAA;AAAvD,GAEI,EADJA,oBAA0E,KAA1E,EAA0E;AAArET,SAAK,EAAC,QAA+D;AAArDU,SAAK;AAAAC;AAAAC,YAAuBC,aAAOC,CAAP,GAAQ;AAA/B;AAAgD,GAA1E;;AAAA,GACI,CAHN,GAIAL,oBAAyB,GAAzB,EAAyB,IAAzB,EAAG,YAAOM,iBAAGF,WAAH,CAAV,EAAkB;AAAA;AAAlB,IALF;;AAAA","names":["class","ref","width","height","_createElementBlock","tabindex","onKeydown","$options","onKeyup","_createElementVNode","style","bottom","left","$data","x","_toDisplayString"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\TreasurePage.vue"],"sourcesContent":["<template>\r\n     <div class=\"game\" tabindex=\"0\" @keydown=\"handleKeyDown\" @keyup=\"handleKeyUp\">\r\n       <div class=\"canvas-container\">\r\n         <canvas ref=\"canvas\" width=\"400\" height=\"400\"></canvas>\r\n         <div class=\"basket\" :style=\"{ bottom: '0', left: basket.x + 'px' }\"></div>\r\n       </div>\r\n       <p>Score: {{ score }}</p>\r\n     </div>\r\n   </template>\r\n   \r\n   <script>\r\n   export default {\r\n     data() {\r\n       return {\r\n         canvas: null,\r\n         ctx: null,\r\n         width: 0,\r\n         height: 0,\r\n         basket: {\r\n           x: 0,\r\n           width: 100,\r\n           height: 20,\r\n         },\r\n         objects: [],\r\n         score: 0,\r\n         isMovingLeft: false,\r\n         isMovingRight: false,\r\n       };\r\n     },\r\n     mounted() {\r\n       this.canvas = this.$refs.canvas;\r\n       this.ctx = this.canvas.getContext('2d');\r\n       this.width = this.canvas.width;\r\n       this.height = this.canvas.height;\r\n       this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\r\n       this.draw();\r\n\r\n       window.addEventListener('keydown', this.handleKeyDown);\r\n       window.addEventListener('keyup', this.handleKeyUp);\r\n     },\r\n     methods: {\r\n       draw() {\r\n         this.ctx.clearRect(0, 0, this.width, this.height);\r\n         this.ctx.fillStyle = 'blue';\r\n         this.ctx.fillRect(this.basket.x, this.height - this.basket.height, this.basket.width, this.basket.height);\r\n   \r\n         for (const object of this.objects) {\r\n           this.ctx.fillStyle = 'red';\r\n           this.ctx.fillRect(object.x, object.y, object.width, object.height);\r\n   \r\n           object.y += object.speed;\r\n           if (this.isCollision(this.basket, object)) {\r\n             this.objects.splice(this.objects.indexOf(object), 1);\r\n             this.score++;\r\n           } else if (object.y > this.height) {\r\n             this.objects.splice(this.objects.indexOf(object), 1);\r\n           }\r\n         }\r\n   \r\n         requestAnimationFrame(this.draw);\r\n       },\r\n       createObject() {\r\n         const object = {\r\n           x: Math.random() * (this.width - 20),\r\n           y: 0,\r\n           width: 20,\r\n           height: 20,\r\n           speed: Math.random() * 3 + 1, // Random speed between 1 and 4\r\n         };\r\n         this.objects.push(object);\r\n       },\r\n       moveBasket() {\r\n         const speed = 5;\r\n         if (this.isMovingLeft) {\r\n           this.basket.x = Math.max(0, this.basket.x - speed);\r\n         }\r\n         if (this.isMovingRight) {\r\n           this.basket.x = Math.min(this.width - this.basket.width, this.basket.x + speed);\r\n         }\r\n       },\r\n       handleKeyDown(event) {\r\n         event.preventDefault(); // Prevent default keyboard behavior\r\n         if (event.key === 'ArrowLeft') {\r\n           this.isMovingLeft = true;\r\n         } else if (event.key === 'ArrowRight') {\r\n           this.isMovingRight = true;\r\n         } else if (event.key === 'ArrowUp') {\r\n           this.moveBasketUp();\r\n         }\r\n       },\r\n       handleKeyUp(event) {\r\n         if (event.key=== 'ArrowLeft') {\r\n        this.isMovingLeft = false;\r\n      } else if (event.key === 'ArrowRight') {\r\n        this.isMovingRight = false;\r\n      }\r\n    },\r\n    moveBasketUp() {\r\n      const originalY = this.height - this.basket.height;\r\n      const offsetY = -50;\r\n      this.basket.y += offsetY;\r\n\r\n      setTimeout(() => {\r\n        this.basket.y = originalY;\r\n      }, 500); // Adjust the duration as needed (in milliseconds)\r\n    },\r\n    isCollision(rect1, rect2) {\r\n      return (\r\n        rect1.x < rect2.x + rect2.width &&\r\n        rect1.x + rect1.width > rect2.x &&\r\n        rect1.y < rect2.y + rect2.height &&\r\n        rect1.y + rect1.height > rect2.y\r\n      );\r\n    },\r\n    beforeUnmount() {\r\n     // 이전 코드 유지\r\n\r\n     // 키 이벤트 리스너 제거\r\n     window.removeEventListener('keydown', this.handleKeyDown);\r\n     window.removeEventListener('keyup', this.handleKeyUp);\r\n     },\r\n  },\r\n  created() {\r\n    setInterval(this.createObject, 1000); // Create new objects every second\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.canvas-container {\r\n  position: relative;\r\n  width: 400px;\r\n  height: 400px;\r\n  border: 1px solid #000;\r\n}\r\n\r\ncanvas {\r\n  border: 1px solid #000;\r\n}\r\n\r\n.game {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.basket {\r\n  position: absolute;\r\n  width: 100px;\r\n  height: 20px;\r\n  background-color: blue;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}