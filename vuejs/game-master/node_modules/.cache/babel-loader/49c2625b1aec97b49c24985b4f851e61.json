{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers, normalizeStyle as _normalizeStyle, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-41c6a358\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"움직이는 공 맞추기\", -1\n/* HOISTED */\n));\n\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"score-board\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"game-cleared\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: \"game-board\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.missClick && $options.missClick(...args))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.objects, (object, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"game-object\",\n      style: _normalizeStyle({\n        width: object.size + 'px',\n        height: object.size + 'px',\n        top: object.y + 'px',\n        left: object.x + 'px',\n        backgroundColor: object.color\n      }),\n      onClick: _withModifiers($event => $options.handleClick(object), [\"stop\"])\n    }, null, 12\n    /* STYLE, PROPS */\n    , _hoisted_3);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createElementVNode(\"div\", _hoisted_4, \"Score: \" + _toDisplayString($data.score), 1\n  /* TEXT */\n  ), $data.isGameCleared ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, \"Game Cleared!\")) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"mappings":";;;;gEAEMA,oBAAmB,IAAnB,EAAmB,IAAnB,EAAI,YAAJ,EAAc;AAAA;AAAd;;;AACKC,OAAK,EAAC;;;;AAeRA,OAAK,EAAC;;;;AACeA,OAAK,EAAC;;;uBAlBjCC,oBAqBM,KArBN,EAqBM,IArBN,EAqBM,CApBHC,UAoBG,EAnBHH,oBAkBM,KAlBN,cAkBM,CAjBHA,oBAgBD,KAhBC,EAgBD;AAhBMC,SAAK,EAAC,YAgBZ;AAhB0BG,WAAK,yCAAEC,iDAAF;AAgB/B,GAhBC,sBACLH,oBAYOI,SAZP,EAYO,IAZP,EAYOC,YAXqBC,aAWrB,EAX4B,CAAzBC,MAAyB,EAAjBC,KAAiB,KAAZ;yBADvBR,oBAYO,KAZP,EAYO;AAVJS,SAAG,EAAED,KAUD;AATLT,WAAK,EAAC,aASD;AARJW,WAAK;eAAoBH,MAAM,CAACI,IAAP,GAAW,IAA/B;gBAAyDJ,MAAM,CAACI,IAAP,GAAW,IAApE;aAA2FJ,MAAM,CAACK,CAAP,GAAQ,IAAnG;cAA2HL,MAAM,CAACM,CAAP,GAAQ,IAAnI;yBAAsKN,MAAM,CAACO;AAA7K,QAQD;AADJZ,aAAK,2BAAOC,qBAAYI,MAAZ,CAAP,EAAyB,QAAzB;AACD,KAZP;;AAAA;GAYO,CAZP;;AAAA,MAaAT,oBAAiD,KAAjD,cAAyB,YAAOiB,iBAAGT,WAAH,CAAhC,EAAwC;AAAA;AAAxC,KACWA,qCAAXN,oBAAkE,KAAlE,cAA+C,eAA/C,uCAfK,CAiBG,CAlBN,CAmBG,CArBN","names":["_createElementVNode","class","_createElementBlock","_hoisted_1","onClick","$options","_Fragment","_renderList","$data","object","index","key","style","size","y","x","color","_toDisplayString"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\EaglePage.vue"],"sourcesContent":["<template>\r\n   <div>\r\n      <h1>움직이는 공 맞추기</h1>\r\n      <div class=\"container\">\r\n         <div class=\"game-board\" @click=\"missClick\">\r\n    <div\r\n      v-for=\"(object, index) in objects\"\r\n      :key=\"index\"\r\n      class=\"game-object\"\r\n      :style=\"{\r\n        width: object.size + 'px',\r\n        height: object.size + 'px',\r\n        top: object.y + 'px',\r\n        left: object.x + 'px',\r\n        backgroundColor: object.color\r\n      }\"\r\n      @click.stop=\"handleClick(object)\"\r\n    ></div>\r\n    <div class=\"score-board\">Score: {{ score }}</div>\r\n    <div v-if=\"isGameCleared\" class=\"game-cleared\">Game Cleared!</div>\r\n  </div>\r\n      </div>\r\n   </div>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      boardWidth: 800,\r\n      boardHeight: 600,\r\n      objects: [],\r\n      score: 0,\r\n      isGameCleared: false\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initGame();\r\n    this.moveObjects();\r\n  },\r\n  methods: {\r\n    initGame() {\r\n      const trapObjects = Array(3)\r\n        .fill()\r\n        .map(() => ({\r\n          size: 50,\r\n          speed: 2000,\r\n          color: \"red\",\r\n          score: Math.floor(Math.random() * 46) * -1 - 5\r\n        }));\r\n\r\n      const positiveObjects = [\r\n        { size: 50, speed: 2000, color: \"green\", score: 5 },\r\n        { size: 50, speed: 2000, color: \"green\", score: 5 },\r\n        { size: 50, speed: 2000, color: \"green\", score: 5 },\r\n        { size: 40, speed: 1800, color: \"blue\", score: 10 },\r\n        { size: 40, speed: 1800, color: \"blue\", score: 10 },\r\n        { size: 30, speed: 1600, color: \"yellow\", score: 15 },\r\n        { size: 30, speed: 1600, color: \"yellow\", score: 15 },\r\n        { size: 20, speed: 1400, color: \"purple\", score: 20 },\r\n        { size: 10, speed: 1000, color: \"orange\", score: 30 }\r\n      ];\r\n\r\n      this.objects = [...trapObjects, ...positiveObjects];\r\n    },\r\n    moveObject(object) {\r\n      object.x = Math.floor(Math.random() * (this.boardWidth - object.size));\r\n      object.y = Math.floor(Math.random() * (this.boardHeight - object.size));\r\n\r\n      setTimeout(() => {\r\n        this.moveObject(object);\r\n      }, object.speed);\r\n    },\r\n    moveObjects() {\r\n      for (const object of this.objects) {\r\n        this.moveObject(object);\r\n      }\r\n    },\r\n    handleClick(object) {\r\n      this.score += object.score;\r\n      object.visible = false;\r\n\r\n      const remainingObjects = this.objects.filter(\r\n        (obj) => obj.score > 0 && obj.visible\r\n      );\r\n\r\n      if (remainingObjects.length === 0) {\r\n        this.isGameCleared = true;\r\n  }\r\n},\r\nmissClick() {\r\n  this.score -= 1;\r\n}\r\n}\r\n};\r\n</script>\r\n \r\n<style scoped>\r\n#game-board {\r\n   position: relative;\r\n   width: 600px;\r\n   height: 400px;\r\n   border: 1px solid black;\r\n}\r\n\r\n.object {\r\n   position: absolute;\r\n   background-color: red;\r\n   border-radius: 50%;\r\n}\r\n\r\n.object-0,\r\n.object-1,\r\n.object-2 {\r\n   background-color: purple;\r\n}\r\n\r\n.container {\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: center;\r\n   width: 100%;\r\n}\r\n\r\n.game-cleared {\r\n   position: absolute;\r\n   top: 50%;\r\n   left: 50%;\r\n   transform: translate(-50%, -50%);\r\n   font-size: 24px;\r\n   font-weight: bold;\r\n   color: green;\r\n}\r\n</style>\r\n\r\n<style>\r\n/* 동적으로 물체의 크기를 설정하기 위한 CSS */\r\n.object[data-size=\"50\"] {\r\n   width: 50px;\r\n   height: 50px;\r\n}\r\n\r\n.object[data-size=\"40\"] {\r\n   width: 40px;\r\n   height: 40px;\r\n}\r\n\r\n.object[data-size=\"30\"] {\r\n   width: 30px;\r\n   height: 30px;\r\n}\r\n\r\n.object[data-size=\"20\"] {\r\n   width: 20px;\r\n   height: 20px;\r\n}\r\n\r\n.object[data-size=\"10\"] {\r\n   width: 10px;\r\n   height: 10px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}