{"ast":null,"code":"export default {\n  data() {\n    return {\n      boardWidth: 800,\n      boardHeight: 600,\n      objects: [],\n      score: 0,\n      isGameCleared: false\n    };\n  },\n\n  mounted() {\n    this.initGame();\n    this.moveObjects();\n  },\n\n  methods: {\n    initGame() {\n      const trapObjects = Array(3).fill().map(() => ({\n        size: 50,\n        speed: 2000,\n        color: \"red\",\n        score: Math.floor(Math.random() * 46) * -1 - 5\n      }));\n      const positiveObjects = [{\n        size: 50,\n        speed: 2000,\n        color: \"green\",\n        score: 5\n      }, {\n        size: 50,\n        speed: 2000,\n        color: \"green\",\n        score: 5\n      }, {\n        size: 50,\n        speed: 2000,\n        color: \"green\",\n        score: 5\n      }, {\n        size: 40,\n        speed: 1800,\n        color: \"blue\",\n        score: 10\n      }, {\n        size: 40,\n        speed: 1800,\n        color: \"blue\",\n        score: 10\n      }, {\n        size: 30,\n        speed: 1600,\n        color: \"yellow\",\n        score: 15\n      }, {\n        size: 30,\n        speed: 1600,\n        color: \"yellow\",\n        score: 15\n      }, {\n        size: 20,\n        speed: 1400,\n        color: \"purple\",\n        score: 20\n      }, {\n        size: 10,\n        speed: 1000,\n        color: \"orange\",\n        score: 30\n      }];\n      this.objects = [...trapObjects, ...positiveObjects];\n    },\n\n    moveObject(object) {\n      object.x = Math.floor(Math.random() * (this.boardWidth - object.size));\n      object.y = Math.floor(Math.random() * (this.boardHeight - object.size));\n      setTimeout(() => {\n        this.moveObject(object);\n      }, object.speed);\n    },\n\n    moveObjects() {\n      for (const object of this.objects) {\n        this.moveObject(object);\n      }\n    },\n\n    handleClick(object) {\n      this.score += object.score;\n      object.visible = false;\n      const remainingObjects = this.objects.filter(obj => obj.score > 0 && obj.visible);\n\n      if (remainingObjects.length === 0) {\n        this.isGameCleared = true;\n      }\n    },\n\n    missClick() {\n      this.score -= 1;\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["data","boardWidth","boardHeight","objects","score","isGameCleared","mounted","initGame","moveObjects","methods","trapObjects","Array","fill","map","size","speed","color","Math","floor","random","positiveObjects","moveObject","object","x","y","setTimeout","handleClick","visible","remainingObjects","filter","obj","length","missClick"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\EaglePage.vue"],"sourcesContent":["<template>\r\n   <div>\r\n      <h1>움직이는 공 맞추기</h1>\r\n      <div class=\"container\">\r\n         <div class=\"game-board\" @click=\"missClick\">\r\n    <div\r\n      v-for=\"(object, index) in objects\"\r\n      :key=\"index\"\r\n      class=\"game-object\"\r\n      :style=\"{\r\n        width: object.size + 'px',\r\n        height: object.size + 'px',\r\n        top: object.y + 'px',\r\n        left: object.x + 'px',\r\n        backgroundColor: object.color\r\n      }\"\r\n      @click.stop=\"handleClick(object)\"\r\n    ></div>\r\n    <div class=\"score-board\">Score: {{ score }}</div>\r\n    <div v-if=\"isGameCleared\" class=\"game-cleared\">Game Cleared!</div>\r\n  </div>\r\n      </div>\r\n   </div>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      boardWidth: 800,\r\n      boardHeight: 600,\r\n      objects: [],\r\n      score: 0,\r\n      isGameCleared: false\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initGame();\r\n    this.moveObjects();\r\n  },\r\n  methods: {\r\n    initGame() {\r\n      const trapObjects = Array(3)\r\n        .fill()\r\n        .map(() => ({\r\n          size: 50,\r\n          speed: 2000,\r\n          color: \"red\",\r\n          score: Math.floor(Math.random() * 46) * -1 - 5\r\n        }));\r\n\r\n      const positiveObjects = [\r\n        { size: 50, speed: 2000, color: \"green\", score: 5 },\r\n        { size: 50, speed: 2000, color: \"green\", score: 5 },\r\n        { size: 50, speed: 2000, color: \"green\", score: 5 },\r\n        { size: 40, speed: 1800, color: \"blue\", score: 10 },\r\n        { size: 40, speed: 1800, color: \"blue\", score: 10 },\r\n        { size: 30, speed: 1600, color: \"yellow\", score: 15 },\r\n        { size: 30, speed: 1600, color: \"yellow\", score: 15 },\r\n        { size: 20, speed: 1400, color: \"purple\", score: 20 },\r\n        { size: 10, speed: 1000, color: \"orange\", score: 30 }\r\n      ];\r\n\r\n      this.objects = [...trapObjects, ...positiveObjects];\r\n    },\r\n    moveObject(object) {\r\n      object.x = Math.floor(Math.random() * (this.boardWidth - object.size));\r\n      object.y = Math.floor(Math.random() * (this.boardHeight - object.size));\r\n\r\n      setTimeout(() => {\r\n        this.moveObject(object);\r\n      }, object.speed);\r\n    },\r\n    moveObjects() {\r\n      for (const object of this.objects) {\r\n        this.moveObject(object);\r\n      }\r\n    },\r\n    handleClick(object) {\r\n      this.score += object.score;\r\n      object.visible = false;\r\n\r\n      const remainingObjects = this.objects.filter(\r\n        (obj) => obj.score > 0 && obj.visible\r\n      );\r\n\r\n      if (remainingObjects.length === 0) {\r\n        this.isGameCleared = true;\r\n  }\r\n},\r\nmissClick() {\r\n  this.score -= 1;\r\n}\r\n}\r\n};\r\n</script>\r\n \r\n<style scoped>\r\n#game-board {\r\n   position: relative;\r\n   width: 600px;\r\n   height: 400px;\r\n   border: 1px solid black;\r\n}\r\n\r\n.object {\r\n   position: absolute;\r\n   background-color: red;\r\n   border-radius: 50%;\r\n}\r\n\r\n.object-0,\r\n.object-1,\r\n.object-2 {\r\n   background-color: purple;\r\n}\r\n\r\n.container {\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: center;\r\n   width: 100%;\r\n}\r\n\r\n.game-cleared {\r\n   position: absolute;\r\n   top: 50%;\r\n   left: 50%;\r\n   transform: translate(-50%, -50%);\r\n   font-size: 24px;\r\n   font-weight: bold;\r\n   color: green;\r\n}\r\n</style>\r\n\r\n<style>\r\n/* 동적으로 물체의 크기를 설정하기 위한 CSS */\r\n.object[data-size=\"50\"] {\r\n   width: 50px;\r\n   height: 50px;\r\n}\r\n\r\n.object[data-size=\"40\"] {\r\n   width: 40px;\r\n   height: 40px;\r\n}\r\n\r\n.object[data-size=\"30\"] {\r\n   width: 30px;\r\n   height: 30px;\r\n}\r\n\r\n.object[data-size=\"20\"] {\r\n   width: 20px;\r\n   height: 20px;\r\n}\r\n\r\n.object[data-size=\"10\"] {\r\n   width: 10px;\r\n   height: 10px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}