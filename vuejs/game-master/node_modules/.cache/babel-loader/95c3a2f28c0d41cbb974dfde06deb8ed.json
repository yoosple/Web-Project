{"ast":null,"code":"import { gsap } from 'gsap';\nimport { Howl } from 'howler';\nexport default {\n  data() {\n    return {\n      score: 0,\n      showDanceAnimation: false,\n      directionKeys: [{\n        key: 'ArrowLeft',\n        notes: []\n      }, {\n        key: 'ArrowUp',\n        notes: []\n      }, {\n        key: 'ArrowDown',\n        notes: []\n      }, {\n        key: 'ArrowRight',\n        notes: []\n      }],\n      hitPosition: 100,\n      song: new Howl({\n        src: ['path/to/your/song.mp3'],\n        onplay: this.onSongPlay\n      })\n    };\n  },\n\n  mounted() {\n    window.addEventListener('keydown', this.handleKeydown);\n    this.song.play();\n  },\n\n  beforeUnmount() {\n    window.removeEventListener('keydown', this.handleKeydown);\n  },\n\n  methods: {\n    onSongPlay() {\n      const noteTimings = [{\n        timing: 1,\n        direction: 'ArrowLeft'\n      }, {\n        timing: 2,\n        direction: 'ArrowUp'\n      }, {\n        timing: 3,\n        direction: 'ArrowDown'\n      }, {\n        timing: 4,\n        direction: 'ArrowRight'\n      }];\n      noteTimings.forEach(noteTiming => {\n        const delay = noteTiming.timing - this.hitPosition / 1000;\n        const key = this.directionKeys.find(key => key.key === noteTiming.direction);\n        key.notes.push({\n          position: 0,\n          hit: false\n        });\n        gsap.to(key.notes[key.notes.length - 1], {\n          position: this.hitPosition,\n          duration: delay,\n          onComplete: () => {\n            if (!key.notes[0].hit) {\n              key.notes.shift();\n            }\n          }\n        });\n      });\n    },\n\n    handleKeydown(event) {\n      const key = this.directionKeys.find(key => key.key === event.code);\n\n      if (key) {\n        const note = key.notes[0];\n\n        if (note && note.position >= this.hitPosition - 10 && note.position <= this.hitPosition + 10) {\n          note.hit = true;\n          this.score += 10;\n          this.showDanceAnimation = true;\n          setTimeout(() => {\n            this.showDanceAnimation = false;\n          }, 500);\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAiBA,SAASA,IAAT,QAAqB,MAArB;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,eAAe;AACZC,MAAI,GAAG;AACJ,WAAO;AACJC,WAAK,EAAE,CADH;AAEJC,wBAAkB,EAAE,KAFhB;AAGJC,mBAAa,EAAE,CACZ;AAAEC,WAAG,EAAE,WAAP;AAAoBC,aAAK,EAAE;AAA3B,OADY,EAEZ;AAAED,WAAG,EAAE,SAAP;AAAkBC,aAAK,EAAE;AAAzB,OAFY,EAGZ;AAAED,WAAG,EAAE,WAAP;AAAoBC,aAAK,EAAE;AAA3B,OAHY,EAIZ;AAAED,WAAG,EAAE,YAAP;AAAqBC,aAAK,EAAE;AAA5B,OAJY,CAHX;AASJC,iBAAW,EAAE,GATT;AAUJC,UAAI,EAAE,IAAIR,IAAJ,CAAS;AACZS,WAAG,EAAE,CAAC,uBAAD,CADO;AAEZC,cAAM,EAAE,KAAKC;AAFD,OAAT;AAVF,KAAP;AAeF,GAjBW;;AAkBZC,SAAO,GAAG;AACPC,UAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKC,aAAxC;AACA,SAAKP,IAAL,CAAUQ,IAAV;AACF,GArBW;;AAsBZC,eAAa,GAAG;AACbJ,UAAM,CAACK,mBAAP,CAA2B,SAA3B,EAAsC,KAAKH,aAA3C;AACF,GAxBW;;AAyBZI,SAAO,EAAE;AACNR,cAAU,GAAG;AACV,YAAMS,WAAU,GAAI,CACjB;AAAEC,cAAM,EAAE,CAAV;AAAaC,iBAAS,EAAE;AAAxB,OADiB,EAEjB;AAAED,cAAM,EAAE,CAAV;AAAaC,iBAAS,EAAE;AAAxB,OAFiB,EAGjB;AAAED,cAAM,EAAE,CAAV;AAAaC,iBAAS,EAAE;AAAxB,OAHiB,EAIjB;AAAED,cAAM,EAAE,CAAV;AAAaC,iBAAS,EAAE;AAAxB,OAJiB,CAApB;AAOAF,iBAAW,CAACG,OAAZ,CAAqBC,UAAD,IAAgB;AACjC,cAAMC,KAAI,GAAID,UAAU,CAACH,MAAX,GAAoB,KAAKd,WAAL,GAAmB,IAArD;AACA,cAAMF,GAAE,GAAI,KAAKD,aAAL,CAAmBsB,IAAnB,CAAyBrB,GAAD,IAASA,GAAG,CAACA,GAAJ,KAAYmB,UAAU,CAACF,SAAxD,CAAZ;AAEAjB,WAAG,CAACC,KAAJ,CAAUqB,IAAV,CAAe;AAAEC,kBAAQ,EAAE,CAAZ;AAAeC,aAAG,EAAE;AAApB,SAAf;AAEA9B,YAAI,CAAC+B,EAAL,CAAQzB,GAAG,CAACC,KAAJ,CAAUD,GAAG,CAACC,KAAJ,CAAUyB,MAAV,GAAmB,CAA7B,CAAR,EAAyC;AACtCH,kBAAQ,EAAE,KAAKrB,WADuB;AAEtCyB,kBAAQ,EAAEP,KAF4B;AAGtCQ,oBAAU,EAAE,MAAM;AACf,gBAAI,CAAC5B,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAauB,GAAlB,EAAuB;AACpBxB,iBAAG,CAACC,KAAJ,CAAU4B,KAAV;AACH;AACF;AAPqC,SAAzC;AASF,OAfD;AAgBF,KAzBK;;AA0BNnB,iBAAa,CAACoB,KAAD,EAAQ;AAClB,YAAM9B,GAAE,GAAI,KAAKD,aAAL,CAAmBsB,IAAnB,CAAyBrB,GAAD,IAASA,GAAG,CAACA,GAAJ,KAAY8B,KAAK,CAACC,IAAnD,CAAZ;;AAEA,UAAI/B,GAAJ,EAAS;AACN,cAAMgC,IAAG,GAAIhC,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAb;;AAEA,YAAI+B,IAAG,IAAKA,IAAI,CAACT,QAAL,IAAiB,KAAKrB,WAAL,GAAmB,EAA5C,IAAkD8B,IAAI,CAACT,QAAL,IAAiB,KAAKrB,WAAL,GAAmB,EAA1F,EAA8F;AAC3F8B,cAAI,CAACR,GAAL,GAAW,IAAX;AACA,eAAK3B,KAAL,IAAc,EAAd;AACA,eAAKC,kBAAL,GAA0B,IAA1B;AACAmC,oBAAU,CAAC,MAAM;AACd,iBAAKnC,kBAAL,GAA0B,KAA1B;AACF,WAFS,EAEP,GAFO,CAAV;AAGH;AACH;AACF;;AAzCK;AAzBG,CAAf","names":["gsap","Howl","data","score","showDanceAnimation","directionKeys","key","notes","hitPosition","song","src","onplay","onSongPlay","mounted","window","addEventListener","handleKeydown","play","beforeUnmount","removeEventListener","methods","noteTimings","timing","direction","forEach","noteTiming","delay","find","push","position","hit","to","length","duration","onComplete","shift","event","code","note","setTimeout"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\DancePage.vue"],"sourcesContent":["<template>\r\n   <div class=\"rhythm-game\">\r\n      <div class=\"score\">Ï†êÏàò: {{ score }}</div>\r\n      <div class=\"game-area\">\r\n         <button class=\"chicken\" disabled>üêî</button>\r\n         <button class=\"dance-animation\" v-if=\"showDanceAnimation\" disabled>üíÉ</button>\r\n         <div class=\"note-lanes\">\r\n            <div v-for=\"(key, index) in directionKeys\" :key=\"index\" class=\"note-lane\" ref=\"noteLane\">\r\n               <div class=\"note\" v-for=\"(note, noteIndex) in key.notes\" :key=\"noteIndex\" :class=\"{ hit: note.hit }\"\r\n                  :style=\"{ top: note.position + 'px' }\"></div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</template>\r\n \r\n<script>\r\nimport { gsap } from 'gsap';\r\nimport { Howl } from 'howler';\r\n\r\nexport default {\r\n   data() {\r\n      return {\r\n         score: 0,\r\n         showDanceAnimation: false,\r\n         directionKeys: [\r\n            { key: 'ArrowLeft', notes: [] },\r\n            { key: 'ArrowUp', notes: [] },\r\n            { key: 'ArrowDown', notes: [] },\r\n            { key: 'ArrowRight', notes: [] },\r\n         ],\r\n         hitPosition: 100,\r\n         song: new Howl({\r\n            src: ['path/to/your/song.mp3'],\r\n            onplay: this.onSongPlay,\r\n         }),\r\n      };\r\n   },\r\n   mounted() {\r\n      window.addEventListener('keydown', this.handleKeydown);\r\n      this.song.play();\r\n   },\r\n   beforeUnmount() {\r\n      window.removeEventListener('keydown', this.handleKeydown);\r\n   },\r\n   methods: {\r\n      onSongPlay() {\r\n         const noteTimings = [\r\n            { timing: 1, direction: 'ArrowLeft' },\r\n            { timing: 2, direction: 'ArrowUp' },\r\n            { timing: 3, direction: 'ArrowDown' },\r\n            { timing: 4, direction: 'ArrowRight' },\r\n         ];\r\n\r\n         noteTimings.forEach((noteTiming) => {\r\n            const delay = noteTiming.timing - this.hitPosition / 1000;\r\n            const key = this.directionKeys.find((key) => key.key === noteTiming.direction);\r\n\r\n            key.notes.push({ position: 0, hit: false });\r\n\r\n            gsap.to(key.notes[key.notes.length - 1], {\r\n               position: this.hitPosition,\r\n               duration: delay,\r\n               onComplete: () => {\r\n                  if (!key.notes[0].hit) {\r\n                     key.notes.shift();\r\n                  }\r\n               },\r\n            });\r\n         });\r\n      },\r\n      handleKeydown(event) {\r\n         const key = this.directionKeys.find((key) => key.key === event.code);\r\n\r\n         if (key) {\r\n            const note = key.notes[0];\r\n\r\n            if (note && note.position >= this.hitPosition - 10 && note.position <= this.hitPosition + 10) {\r\n               note.hit = true;\r\n               this.score += 10;\r\n               this.showDanceAnimation = true;\r\n               setTimeout(() => {\r\n                  this.showDanceAnimation = false;\r\n               }, 500);\r\n            }\r\n         }\r\n      },\r\n   },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.rhythm-game {\r\n   display: flex;\r\n   flex-direction: column;\r\n   align-items: center;\r\n}\r\n\r\n.score {\r\n   margin-bottom: 20px;\r\n}\r\n\r\n.game-area {\r\n   position: relative;\r\n   display: flex;\r\n   justify-content: center;\r\n   align-items: center;\r\n}\r\n\r\n.chicken {\r\n   position: absolute;\r\n   font-size: 2rem;\r\n   border: none;\r\n   background: transparent;\r\n   cursor: default;\r\n}\r\n\r\n.dance-animation {\r\n   position: absolute;\r\n   font-size: 2rem;\r\n   border: none;\r\n   background: transparent;\r\n   cursor: default;\r\n}\r\n\r\n.note-lanes {\r\n   display: flex;\r\n}\r\n\r\n.note-lane {\r\n   position: relative;\r\n   width: 100px;\r\n   height: 300px;\r\n   border: 1px solid #000;\r\n}\r\n\r\n.note {\r\n   position: absolute;\r\n   width: 50px;\r\n   height: 50px;\r\n   background-color: #f00;\r\n   opacity: 1;\r\n   left: 25px;\r\n}\r\n\r\n.note.hit {\r\n   opacity: 0;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}