{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-75f46cb8\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"game\"\n};\nconst _hoisted_2 = {\n  class: \"button-container\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" RESET SCORES (r) \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Help = _resolveComponent(\"Help\");\n\n  const _component_Scores = _resolveComponent(\"Scores\");\n\n  const _component_Board = _resolveComponent(\"Board\");\n\n  const _component_Message = _resolveComponent(\"Message\");\n\n  const _component_IButton = _resolveComponent(\"IButton\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Help), _createVNode(_component_Scores), _createVNode(_component_Board), _createVNode(_component_Message), _createElementVNode(\"div\", _hoisted_2, [!_ctx.started || _ctx.finished ? (_openBlock(), _createBlock(_component_IButton, {\n    key: 0,\n    onClick: _ctx.startGame\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.finished ? 'RESTART' : 'START') + \" (s) \", 1\n    /* TEXT */\n    )]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"])) : _createCommentVNode(\"v-if\", true), !_ctx.started || _ctx.finished ? (_openBlock(), _createBlock(_component_IButton, {\n    key: 1,\n    onClick: _ctx.resetScores\n  }, {\n    default: _withCtx(() => [_hoisted_3]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"mappings":";;;;;AACOA,OAAK,EAAC;;;AAKJA,OAAK,EAAC;;;iDAIiD;;;;;;;;;;;;;uBAT9DC,oBAaM,KAbN,cAaM,CAZJC,aAAQC,eAAR,CAYI,EAXJD,aAASE,iBAAT,CAWI,EAVJF,aAAQG,gBAAR,CAUI,EATJH,aAAUI,kBAAV,CASI,EARJC,oBAOM,KAPN,cAOM,EANYC,gBAAWA,+BAA3BC,aAEUC,kBAFV,EAEU;UAAA;AAF4BC,WAAK,EAAEH;AAEnC,GAFV;sBACE,MAAoC,mCAAjCA,gBAAQ,SAAR,GAAQ,WAAyB,SACtC;AAAA;KADsC;;;;GADtC;;AAAA,qDAMI,GAHYA,gBAAWA,+BAA3BC,aAEUC,kBAFV,EAEU;UAAA;AAF4BC,WAAK,EAAEH;AAEnC,GAFV;sBAA0D,MAE1D;;;;GAFA;;AAAA,qDAGI,CAPN,CAQI,CAbN","names":["class","_createElementBlock","_createVNode","_component_Help","_component_Scores","_component_Board","_component_Message","_createElementVNode","_ctx","_createBlock","_component_IButton","onClick"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\tic-tac-toe\\Game.vue"],"sourcesContent":["<template>\r\n  <div class=\"game\">\r\n    <Help />\r\n    <Scores/>\r\n    <Board/>\r\n    <Message/>\r\n    <div class=\"button-container \">\r\n      <IButton v-if=\"!started || finished\" @click=\"startGame\">\r\n        {{ finished ? 'RESTART' : 'START' }} (s)\r\n      </IButton>\r\n      <IButton v-if=\"!started || finished\" @click=\"resetScores\">\r\n        RESET SCORES (r)\r\n      </IButton>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters, mapActions} from 'vuex'\r\nimport Board from './Board'\r\nimport Message from './Message'\r\nimport Scores from './Scores'\r\nimport Help from './Help'\r\nimport IButton from './ui/IButton'\r\nexport default {\r\n  name: \"Game\",\r\n  components: {\r\n    Board,\r\n    Help,\r\n    IButton,\r\n    Message,\r\n    Scores,\r\n  },\r\n  watch: {\r\n    cells: {\r\n      handler(val) {\r\n        const signedXValues = val.filter(v => v.sign === this.signX)\r\n        const signedXOrders = signedXValues.map(s => s.order)\r\n        const signedOValues = val.filter(v => v.sign === this.signO)\r\n        const signedOOrders = signedOValues.map(s => s.order)\r\n        // Who won\r\n        if (this.winnerControl(signedXOrders)) {\r\n          this.setMessage('ðŸš€ðŸš€ðŸš€ X Won ðŸš€ðŸš€ðŸš€')\r\n          this.setMessageStatus('success')\r\n          this.setFinished(true)\r\n          this.setSign(this.signX)\r\n          this.incrementXScore()\r\n        } else if (this.winnerControl(signedOOrders)) {\r\n          this.setMessage('ðŸš€ðŸš€ðŸš€ O Won ðŸš€ðŸš€ðŸš€')\r\n          this.setMessageStatus('success')\r\n          this.setFinished(true)\r\n          this.setSign(this.signO)\r\n          this.incrementOScore()\r\n        } else {\r\n          // Game over\r\n          if (val.length >= 9) {\r\n            this.setMessage('Game Over. Nobody Won...')\r\n            this.setMessageStatus('danger')\r\n            this.setFinished(true)\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'cells',\r\n      'started',\r\n      'finished',\r\n      'signX',\r\n      'signO',\r\n      'winningOrder',\r\n      'winningOrders',\r\n    ])\r\n  },\r\n  methods: {\r\n    ...mapActions([\r\n      'incrementOScore',\r\n      'incrementXScore',\r\n      'resetScores',\r\n      'setCrossClass',\r\n      'setFinished',\r\n      'setMessage',\r\n      'setMessageStatus',\r\n      'setSign',\r\n      'setWinningOrder',\r\n      'startGame',\r\n      'winnerControl',\r\n    ]),\r\n    winnerControl(orders) {\r\n      return this.winningOrders.some(w => {\r\n        const result = w.every(value => orders.includes(value))\r\n        if (result) {\r\n          this.setWinningOrder(w)\r\n        }\r\n        return result\r\n      })\r\n    },\r\n  },\r\n  mounted() {\r\n    // listen keydown for start game and reset scores\r\n    document.addEventListener('keydown', e => {\r\n      if (e.key === 'r') {\r\n        this.resetScores()\r\n      } else if (e.key === 's') {\r\n        this.startGame()\r\n      }\r\n    })\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.game {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: 60px;\r\n}\r\n</style>\r\nÂ© 2022 GitHub, Inc.\r\nTerms\r\nPr"]},"metadata":{},"sourceType":"module"}