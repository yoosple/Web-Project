{"ast":null,"code":"export default {\n  data() {\n    return {\n      canvas: null,\n      ctx: null,\n      width: 0,\n      height: 0,\n      basket: {\n        x: 0,\n        width: 100,\n        height: 20\n      },\n      objects: [],\n      score: 0,\n      isMovingLeft: false,\n      isMovingRight: false\n    };\n  },\n\n  mounted() {\n    this.canvas = this.$refs.canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\n\n    this.draw();\n    this.attachEventListeners();\n  },\n\n  beforeUnmounted() {\n    this.removeEventListeners();\n  },\n\n  methods: {\n    draw() {\n      this.ctx.clearRect(0, 0, this.width, this.height);\n      this.ctx.fillStyle = 'blue';\n      this.ctx.fillRect(this.basket.x, this.height - this.basket.height, this.basket.width, this.basket.height);\n\n      for (const object of this.objects) {\n        this.ctx.fillStyle = 'red';\n        this.ctx.fillRect(object.x, object.y, object.width, object.height);\n        object.y += object.speed;\n\n        if (this.isCollision(this.basket, object)) {\n          this.objects.splice(this.objects.indexOf(object), 1);\n          this.score++;\n        } else if (object.y > this.height) {\n          this.objects.splice(this.objects.indexOf(object), 1);\n        }\n      }\n\n      requestAnimationFrame(this.draw);\n    },\n\n    createObject() {\n      const object = {\n        x: Math.random() * (this.width - 20),\n        y: 0,\n        width: 20,\n        height: 20,\n        speed: Math.random() * 3 + 1 // Random speed between 1 and 4\n\n      };\n      this.objects.push(object);\n    },\n\n    moveBasket() {\n      const speed = 5;\n\n      if (this.isMovingLeft) {\n        this.basket.x = Math.max(0, this.basket.x - speed);\n      }\n\n      if (this.isMovingRight) {\n        this.basket.x = Math.min(this.width - this.basket.width, this.basket.x + speed);\n      }\n    },\n\n    handleKeyDown(event) {\n      event.preventDefault(); // Prevent default keyboard behavior\n\n      if (event.key === 'ArrowLeft') {\n        this.isMovingLeft = true;\n      } else if (event.key === 'ArrowRight') {\n        this.isMovingRight = true;\n      }\n    },\n\n    handleKeyUp(event) {\n      if (event.key === 'ArrowLeft') {\n        this.isMovingLeft = false;\n      } else if (event.key === 'ArrowRight') {\n        this.isMovingRight = false;\n      }\n    },\n\n    attachEventListeners() {\n      window.addEventListener('keydown', this.handleKeyDown);\n      window.addEventListener('keyup', this.handleKeyUp);\n    },\n\n    removeEventListeners() {\n      window.removeEventListener('keydown', this.handleKeyDown);\n      window.removeEventListener('keyup', this.handleKeyUp);\n    },\n\n    moveBasketUp() {\n      const originalY = this.height - this.basket.height;\n      const offsetY = -50;\n      this.basket.y += offsetY;\n      setTimeout(() => {\n        this.basket.y = originalY;\n      }, 500); // Adjust the duration as needed (in milliseconds)\n    },\n\n    isCollision(rect1, rect2) {\n      return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;\n    }\n\n  },\n\n  created() {\n    setInterval(this.createObject, 1000); // Create new objects every second\n  },\n\n  mounted() {\n    this.canvas = this.$refs.canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\n\n    this.draw();\n    this.attachEventListeners();\n  },\n\n  beforeUnmounted() {\n    this.removeEventListeners();\n  }\n\n};","map":{"version":3,"mappings":"AAWA,eAAe;AACVA,MAAI,GAAG;AACF,WAAO;AACFC,YAAM,EAAE,IADN;AAEFC,SAAG,EAAE,IAFH;AAGFC,WAAK,EAAE,CAHL;AAIFC,YAAM,EAAE,CAJN;AAKFC,YAAM,EAAE;AACHC,SAAC,EAAE,CADA;AAEHH,aAAK,EAAE,GAFJ;AAGHC,cAAM,EAAE;AAHL,OALN;AAUFG,aAAO,EAAE,EAVP;AAWFC,WAAK,EAAE,CAXL;AAYFC,kBAAY,EAAE,KAZZ;AAaFC,mBAAa,EAAE;AAbb,KAAP;AAeJ,GAjBS;;AAkBVC,SAAO,GAAG;AACL,SAAKV,MAAL,GAAc,KAAKW,KAAL,CAAWX,MAAzB;AACA,SAAKC,GAAL,GAAW,KAAKD,MAAL,CAAYY,UAAZ,CAAuB,IAAvB,CAAX;AACA,SAAKV,KAAL,GAAa,KAAKF,MAAL,CAAYE,KAAzB;AACA,SAAKC,MAAL,GAAc,KAAKH,MAAL,CAAYG,MAA1B;AACA,SAAKC,MAAL,CAAYC,CAAZ,GAAgB,CAAC,KAAKH,KAAL,GAAa,KAAKE,MAAL,CAAYF,KAA1B,IAAmC,CAAnD,CALK,CAKiD;;AACtD,SAAKW,IAAL;AACA,SAAKC,oBAAL;AACJ,GA1BS;;AA2BVC,iBAAe,GAAG;AACb,SAAKC,oBAAL;AACJ,GA7BS;;AA8BVC,SAAO,EAAE;AACJJ,QAAI,GAAG;AACF,WAAKZ,GAAL,CAASiB,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKhB,KAA9B,EAAqC,KAAKC,MAA1C;AACA,WAAKF,GAAL,CAASkB,SAAT,GAAqB,MAArB;AACA,WAAKlB,GAAL,CAASmB,QAAT,CAAkB,KAAKhB,MAAL,CAAYC,CAA9B,EAAiC,KAAKF,MAAL,GAAc,KAAKC,MAAL,CAAYD,MAA3D,EAAmE,KAAKC,MAAL,CAAYF,KAA/E,EAAsF,KAAKE,MAAL,CAAYD,MAAlG;;AAEA,WAAK,MAAMkB,MAAX,IAAqB,KAAKf,OAA1B,EAAmC;AAC9B,aAAKL,GAAL,CAASkB,SAAT,GAAqB,KAArB;AACA,aAAKlB,GAAL,CAASmB,QAAT,CAAkBC,MAAM,CAAChB,CAAzB,EAA4BgB,MAAM,CAACC,CAAnC,EAAsCD,MAAM,CAACnB,KAA7C,EAAoDmB,MAAM,CAAClB,MAA3D;AAEAkB,cAAM,CAACC,CAAP,IAAYD,MAAM,CAACE,KAAnB;;AACA,YAAI,KAAKC,WAAL,CAAiB,KAAKpB,MAAtB,EAA8BiB,MAA9B,CAAJ,EAA2C;AACtC,eAAKf,OAAL,CAAamB,MAAb,CAAoB,KAAKnB,OAAL,CAAaoB,OAAb,CAAqBL,MAArB,CAApB,EAAkD,CAAlD;AACA,eAAKd,KAAL;AACL,SAHA,MAGO,IAAIc,MAAM,CAACC,CAAP,GAAW,KAAKnB,MAApB,EAA4B;AAC9B,eAAKG,OAAL,CAAamB,MAAb,CAAoB,KAAKnB,OAAL,CAAaoB,OAAb,CAAqBL,MAArB,CAApB,EAAkD,CAAlD;AACL;AACL;;AAEAM,2BAAqB,CAAC,KAAKd,IAAN,CAArB;AACJ,KApBG;;AAqBJe,gBAAY,GAAG;AACV,YAAMP,MAAK,GAAI;AACVhB,SAAC,EAAEwB,IAAI,CAACC,MAAL,MAAiB,KAAK5B,KAAL,GAAa,EAA9B,CADO;AAEVoB,SAAC,EAAE,CAFO;AAGVpB,aAAK,EAAE,EAHG;AAIVC,cAAM,EAAE,EAJE;AAKVoB,aAAK,EAAEM,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CALjB,CAKoB;;AALpB,OAAf;AAOA,WAAKxB,OAAL,CAAayB,IAAb,CAAkBV,MAAlB;AACJ,KA9BG;;AA+BJW,cAAU,GAAG;AACR,YAAMT,KAAI,GAAI,CAAd;;AACA,UAAI,KAAKf,YAAT,EAAuB;AAClB,aAAKJ,MAAL,CAAYC,CAAZ,GAAgBwB,IAAI,CAACI,GAAL,CAAS,CAAT,EAAY,KAAK7B,MAAL,CAAYC,CAAZ,GAAgBkB,KAA5B,CAAhB;AACL;;AACA,UAAI,KAAKd,aAAT,EAAwB;AACnB,aAAKL,MAAL,CAAYC,CAAZ,GAAgBwB,IAAI,CAACK,GAAL,CAAS,KAAKhC,KAAL,GAAa,KAAKE,MAAL,CAAYF,KAAlC,EAAyC,KAAKE,MAAL,CAAYC,CAAZ,GAAgBkB,KAAzD,CAAhB;AACL;AACJ,KAvCG;;AAwCJY,iBAAa,CAACC,KAAD,EAAQ;AAChBA,WAAK,CAACC,cAAN,GADgB,CACQ;;AACxB,UAAID,KAAK,CAACE,GAAN,KAAc,WAAlB,EAA+B;AAC1B,aAAK9B,YAAL,GAAoB,IAApB;AACL,OAFA,MAEO,IAAI4B,KAAK,CAACE,GAAN,KAAc,YAAlB,EAAgC;AAClC,aAAK7B,aAAL,GAAqB,IAArB;AACL;AACJ,KA/CG;;AAgDJ8B,eAAW,CAACH,KAAD,EAAQ;AACd,UAAIA,KAAK,CAACE,GAAN,KAAc,WAAlB,EAA+B;AAC1B,aAAK9B,YAAL,GAAoB,KAApB;AACL,OAFA,MAEO,IAAI4B,KAAK,CAACE,GAAN,KAAc,YAAlB,EAAgC;AAClC,aAAK7B,aAAL,GAAqB,KAArB;AACL;AACJ,KAtDG;;AAuDJK,wBAAoB,GAAG;AAClB0B,YAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKN,aAAxC;AACAK,YAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,KAAKF,WAAtC;AACJ,KA1DG;;AA2DJvB,wBAAoB,GAAG;AAC3BwB,YAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsC,KAAKP,aAA3C;AACAK,YAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoC,KAAKH,WAAzC;AACD,KA9DS;;AA+DVI,gBAAY,GAAG;AACb,YAAMC,SAAQ,GAAI,KAAKzC,MAAL,GAAc,KAAKC,MAAL,CAAYD,MAA5C;AACA,YAAM0C,OAAM,GAAI,CAAC,EAAjB;AACA,WAAKzC,MAAL,CAAYkB,CAAZ,IAAiBuB,OAAjB;AAEAC,gBAAU,CAAC,MAAM;AACf,aAAK1C,MAAL,CAAYkB,CAAZ,GAAgBsB,SAAhB;AACD,OAFS,EAEP,GAFO,CAAV,CALa,CAOJ;AACV,KAvES;;AAwEVpB,eAAW,CAACuB,KAAD,EAAQC,KAAR,EAAe;AACxB,aACED,KAAK,CAAC1C,CAAN,GAAU2C,KAAK,CAAC3C,CAAN,GAAU2C,KAAK,CAAC9C,KAA1B,IACA6C,KAAK,CAAC1C,CAAN,GAAU0C,KAAK,CAAC7C,KAAhB,GAAwB8C,KAAK,CAAC3C,CAD9B,IAEA0C,KAAK,CAACzB,CAAN,GAAU0B,KAAK,CAAC1B,CAAN,GAAU0B,KAAK,CAAC7C,MAF1B,IAGA4C,KAAK,CAACzB,CAAN,GAAUyB,KAAK,CAAC5C,MAAhB,GAAyB6C,KAAK,CAAC1B,CAJjC;AAMD;;AA/ES,GA9BC;;AA+Gb2B,SAAO,GAAG;AACRC,eAAW,CAAC,KAAKtB,YAAN,EAAoB,IAApB,CAAX,CADQ,CAC8B;AACvC,GAjHY;;AAkHblB,SAAO,GAAG;AACR,SAAKV,MAAL,GAAc,KAAKW,KAAL,CAAWX,MAAzB;AACA,SAAKC,GAAL,GAAW,KAAKD,MAAL,CAAYY,UAAZ,CAAuB,IAAvB,CAAX;AACA,SAAKV,KAAL,GAAa,KAAKF,MAAL,CAAYE,KAAzB;AACA,SAAKC,MAAL,GAAc,KAAKH,MAAL,CAAYG,MAA1B;AACA,SAAKC,MAAL,CAAYC,CAAZ,GAAgB,CAAC,KAAKH,KAAL,GAAa,KAAKE,MAAL,CAAYF,KAA1B,IAAmC,CAAnD,CALQ,CAK8C;;AACtD,SAAKW,IAAL;AACA,SAAKC,oBAAL;AACD,GA1HY;;AA2HbC,iBAAe,GAAG;AAChB,SAAKC,oBAAL;AACD;;AA7HY,CAAf","names":["data","canvas","ctx","width","height","basket","x","objects","score","isMovingLeft","isMovingRight","mounted","$refs","getContext","draw","attachEventListeners","beforeUnmounted","removeEventListeners","methods","clearRect","fillStyle","fillRect","object","y","speed","isCollision","splice","indexOf","requestAnimationFrame","createObject","Math","random","push","moveBasket","max","min","handleKeyDown","event","preventDefault","key","handleKeyUp","window","addEventListener","removeEventListener","moveBasketUp","originalY","offsetY","setTimeout","rect1","rect2","created","setInterval"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\TreasurePage.vue"],"sourcesContent":["<template>\r\n     <div class=\"game\" tabindex=\"0\" @keydown=\"handleKeyDown\" @keyup=\"handleKeyUp\">\r\n          <div class=\"canvas-container\">\r\n               <canvas ref=\"canvas\" width=\"400\" height=\"400\"></canvas>\r\n               <div class=\"basket\" :style=\"{ bottom: '0', left: basket.x + 'px' }\"></div>\r\n          </div>\r\n          <p>Score: {{ score }}</p>\r\n     </div>\r\n</template>\r\n   \r\n<script>\r\nexport default {\r\n     data() {\r\n          return {\r\n               canvas: null,\r\n               ctx: null,\r\n               width: 0,\r\n               height: 0,\r\n               basket: {\r\n                    x: 0,\r\n                    width: 100,\r\n                    height: 20,\r\n               },\r\n               objects: [],\r\n               score: 0,\r\n               isMovingLeft: false,\r\n               isMovingRight: false,\r\n          };\r\n     },\r\n     mounted() {\r\n          this.canvas = this.$refs.canvas;\r\n          this.ctx = this.canvas.getContext('2d');\r\n          this.width = this.canvas.width;\r\n          this.height = this.canvas.height;\r\n          this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\r\n          this.draw();\r\n          this.attachEventListeners();\r\n     },\r\n     beforeUnmounted() {\r\n          this.removeEventListeners();\r\n     },\r\n     methods: {\r\n          draw() {\r\n               this.ctx.clearRect(0, 0, this.width, this.height);\r\n               this.ctx.fillStyle = 'blue';\r\n               this.ctx.fillRect(this.basket.x, this.height - this.basket.height, this.basket.width, this.basket.height);\r\n\r\n               for (const object of this.objects) {\r\n                    this.ctx.fillStyle = 'red';\r\n                    this.ctx.fillRect(object.x, object.y, object.width, object.height);\r\n\r\n                    object.y += object.speed;\r\n                    if (this.isCollision(this.basket, object)) {\r\n                         this.objects.splice(this.objects.indexOf(object), 1);\r\n                         this.score++;\r\n                    } else if (object.y > this.height) {\r\n                         this.objects.splice(this.objects.indexOf(object), 1);\r\n                    }\r\n               }\r\n\r\n               requestAnimationFrame(this.draw);\r\n          },\r\n          createObject() {\r\n               const object = {\r\n                    x: Math.random() * (this.width - 20),\r\n                    y: 0,\r\n                    width: 20,\r\n                    height: 20,\r\n                    speed: Math.random() * 3 + 1, // Random speed between 1 and 4\r\n               };\r\n               this.objects.push(object);\r\n          },\r\n          moveBasket() {\r\n               const speed = 5;\r\n               if (this.isMovingLeft) {\r\n                    this.basket.x = Math.max(0, this.basket.x - speed);\r\n               }\r\n               if (this.isMovingRight) {\r\n                    this.basket.x = Math.min(this.width - this.basket.width, this.basket.x + speed);\r\n               }\r\n          },\r\n          handleKeyDown(event) {\r\n               event.preventDefault(); // Prevent default keyboard behavior\r\n               if (event.key === 'ArrowLeft') {\r\n                    this.isMovingLeft = true;\r\n               } else if (event.key === 'ArrowRight') {\r\n                    this.isMovingRight = true;\r\n               }\r\n          },\r\n          handleKeyUp(event) {\r\n               if (event.key === 'ArrowLeft') {\r\n                    this.isMovingLeft = false;\r\n               } else if (event.key === 'ArrowRight') {\r\n                    this.isMovingRight = false;\r\n               }\r\n          },\r\n          attachEventListeners() {\r\n               window.addEventListener('keydown', this.handleKeyDown);\r\n               window.addEventListener('keyup', this.handleKeyUp);\r\n          },\r\n          removeEventListeners() {\r\n      window.removeEventListener('keydown', this.handleKeyDown);\r\n      window.removeEventListener('keyup', this.handleKeyUp);\r\n    },\r\n    moveBasketUp() {\r\n      const originalY = this.height - this.basket.height;\r\n      const offsetY = -50;\r\n      this.basket.y += offsetY;\r\n\r\n      setTimeout(() => {\r\n        this.basket.y = originalY;\r\n      }, 500); // Adjust the duration as needed (in milliseconds)\r\n    },\r\n    isCollision(rect1, rect2) {\r\n      return (\r\n        rect1.x < rect2.x + rect2.width &&\r\n        rect1.x + rect1.width > rect2.x &&\r\n        rect1.y < rect2.y + rect2.height &&\r\n        rect1.y + rect1.height > rect2.y\r\n      );\r\n    },\r\n  },\r\n  created() {\r\n    setInterval(this.createObject, 1000); // Create new objects every second\r\n  },\r\n  mounted() {\r\n    this.canvas = this.$refs.canvas;\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.width = this.canvas.width;\r\n    this.height = this.canvas.height;\r\n    this.basket.x = (this.width - this.basket.width) / 2; // Center the basket horizontally\r\n    this.draw();\r\n    this.attachEventListeners();\r\n  },\r\n  beforeUnmounted() {\r\n    this.removeEventListeners();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.canvas-container {\r\n  position: relative;\r\n  width: 400px;\r\n  height: 400px;\r\n  border: 1px solid #000;\r\n}\r\n\r\ncanvas {\r\n  border: 1px solid #000;\r\n}\r\n\r\n.game {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.basket {\r\n  position: absolute;\r\n  width: 100px;\r\n  height: 20px;\r\n  background-color: blue;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}