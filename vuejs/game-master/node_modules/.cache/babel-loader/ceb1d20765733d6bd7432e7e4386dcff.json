{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-41c6a358\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"움직이는 공 맞추기\", -1\n/* HOISTED */\n));\n\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = [\"data-size\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.objects, (object, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"object\", 'object-' + index]),\n      style: _normalizeStyle({\n        top: object.y + 'px',\n        left: object.x + 'px'\n      }),\n      \"data-size\": object.size,\n      onClick: _withModifiers($event => $options.objectClicked(object.points), [\"stop\"])\n    }, null, 14\n    /* CLASS, STYLE, PROPS */\n    , _hoisted_3);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _createElementVNode(\"p\", null, \"Score: \" + _toDisplayString($data.score), 1\n  /* TEXT */\n  )]);\n}","map":{"version":3,"mappings":";;;;gEAGMA,oBAAmB,IAAnB,EAAmB,IAAnB,EAAI,YAAJ,EAAc;AAAA;AAAd;;;AACKC,OAAK,EAAC;;;;uBAFdC,oBAcM,KAdN,EAcM,IAdN,EAcM,CAbHC,UAaG,EAZHH,oBAUM,KAVN,cAUM,oBATHE,oBAQIE,SARJ,EAQI,IARJ,EAQIC,YAPqBC,aAOrB,EAP4B,CAAzBC,MAAyB,EAAjBC,KAAiB,KAAZ;yBADpBN,oBAQI,KARJ,EAQI;AANJO,SAAG,EAAED,KAMD;AALLP,WAAK,mBAAC,QAAD,EAAS,YACMO,KADf,EAKA;AAHJE,WAAK;AAAAC,aAAQJ,MAAM,CAACK,CAAP,GAAQ,IAAhB;AAAgBC,cAAeN,MAAM,CAACO,CAAP,GAAQ;AAAvC,QAGD;AAFJ,mBAAWP,MAAM,CAACQ,IAEd;AADJC,aAAK,2BAAOC,uBAAcV,MAAM,CAACW,MAArB,CAAP,EAAkC,QAAlC;AACD,KARJ;;AAAA;GAQI,CARJ;;AAAA,GASG,EAVN,CAYG,EADHlB,oBAAyB,GAAzB,EAAyB,IAAzB,EAAG,YAAOmB,iBAAGb,WAAH,CAAV,EAAkB;AAAA;AAAlB,GACG,CAdN","names":["_createElementVNode","class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","object","index","key","style","top","y","left","x","size","onClick","$options","points","_toDisplayString"],"sourceRoot":"","sources":["C:\\Users\\kk\\Desktop\\Web\\Web-Project\\vuejs\\game-master\\src\\components\\menus\\EaglePage.vue"],"sourcesContent":["\r\n<template>\r\n   <div>\r\n      <h1>움직이는 공 맞추기</h1>\r\n      <div class=\"container\">\r\n         <div\r\n        v-for=\"(object, index) in objects\"\r\n        :key=\"index\"\r\n        class=\"object\"\r\n        :class=\"'object-' + index\"\r\n        :style=\"{top: object.y + 'px', left: object.x + 'px'}\"\r\n        :data-size=\"object.size\"\r\n        @click.stop=\"objectClicked(object.points)\"\r\n      ></div>\r\n      </div>\r\n      <p>Score: {{ score }}</p>\r\n   </div>\r\n</template>\r\n \r\n <script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      objects: [\r\n        { points: -Math.floor(Math.random() * (50 - 5 + 1) + 5), size: 50, speed: 1000 },\r\n        { points: -Math.floor(Math.random() * (50 - 5 + 1) + 5), size: 50, speed: 1000 },\r\n        { points: -Math.floor(Math.random() * (50 - 5 + 1) + 5), size: 50, speed: 1000 },\r\n        { points: 5, size: 50, speed: 1000 },\r\n        { points: 5, size: 50, speed: 1000 },\r\n        { points: 5, size: 50, speed: 1000 },\r\n        { points: 10, size: 40, speed: 1000 },\r\n        { points: 10, size: 40, speed: 1000 },\r\n        { points: 15, size: 30, speed: 1000 },\r\n        { points: 15, size: 30, speed: 1000 },\r\n        { points: 20, size: 20, speed: 1000 },\r\n        { points: 30, size: 10, speed: 500 },\r\n      ],\r\n      score: 0,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.moveObjects();\r\n  },\r\n  methods: {\r\n    moveObjects() {\r\n      this.objects.forEach((object, index) => {\r\n        setInterval(() => {\r\n          object.x = Math.floor(Math.random() * (600 - object.size));\r\n          object.y = Math.floor(Math.random() * (400 - object.size));\r\n        }, object.speed);\r\n      });\r\n    },\r\n    objectClicked(points) {\r\n      this.score += points;\r\n    },\r\n    missedClick() {\r\n      this.score -= 1;\r\n    },\r\n  },\r\n};\r\n </script>\r\n \r\n <style scoped>\r\n #game-board {\r\n  position: relative;\r\n  width: 600px;\r\n  height: 400px;\r\n  border: 1px solid black;\r\n}\r\n.object {\r\n  position: absolute;\r\n  background-color: red;\r\n  border-radius: 50%;\r\n}\r\n.object-0,\r\n.object-1,\r\n.object-2 {\r\n  background-color: purple;\r\n}\r\n\r\n .container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n}\r\n</style>\r\n\r\n<style scoped>\r\n/* ... 기존 스타일 ... */\r\n.object {\r\n  position: absolute;\r\n  background-color: red;\r\n  border-radius: 50%;\r\n}\r\n.object-0,\r\n.object-1,\r\n.object-2 {\r\n  background-color: purple;\r\n}\r\n</style>\r\n\r\n<style>\r\n/* 동적으로 물체의 크기를 설정하기 위한 CSS */\r\n.object[data-size=\"50\"] {\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n.object[data-size=\"40\"] {\r\n  width: 40px;\r\n  height: 40px;\r\n}\r\n.object[data-size=\"30\"] {\r\n  width: 30px;\r\n  height: 30px;\r\n}\r\n.object[data-size=\"20\"] {\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n.object[data-size=\"10\"] {\r\n  width: 10px;\r\n  height: 10px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}